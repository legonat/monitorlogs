{"version":3,"sources":["components/dots.pulse.loader.js","components/login.component.js","components/LoginContainer.js","components/logout.component.js","components/register.component.js","components/navtabs.component.js","components/tablePagination.component.js","utils/logger.js","components/board.component.js","components/navbar.component.js","components/PrivateRoute.js","components/scrollToTopButton.component.js","utils/authModule.js","App.js","serviceWorker.js","index.js"],"names":["DotsLoader","props","color","className","Login","this","submitted","name","type","placeholder","value","user","onChange","handleUsernameInput","pass","handlePassInput","id","defaultChecked","canRememberMe","handleRememberMeCheckbox","htmlFor","onClick","handleLoginSubmit","href","Component","LoginContainer","React","Logout","handleRender","isAuthenticated","handleLogoutSubmit","to","Register","passwordMatch","required","confirmPass","handleConfirmPassInput","handleRegisterSubmit","disabled","NavTabs","buildTabsRow","tabsRowElements","tabsArray","forEach","element","index","push","NavItem","onTabClick","NavLink","eventKey","toString","buildTabsContent","tabsContentElements","propContent","contents","Tab","Pane","buildUnorderedDropdown","dropdownName","dropdownSelected","selectChange","list","align","dropdownValue","handleSelectChange","data","buildOrderedDropdown","buildSessionsDropdown","undefined","sessions","sessionsDropdownValue","handleSelectSessionChange","buildFilenamesDropdown","filenames","logsDropdownValue","handleSelectFilenameChange","buildDTP","buildDTP2","as","Datetime","buildSessionString","dateRange","moment","format","Container","defaultActiveKey","currentTab","Row","Col","sm","Nav","variant","datePicker","Content","DropdownTabOrderedSelect","rows","d","Dropdown","Item","data-key","onSelect","Toggle","Menu","DropdownTabUnorderedSelect","MyDTPicker","renderInput","openCalendar","closeCalendar","target","TablePagination","handlePageClick","event","nodeName","pageNumber","parseInt","text","handlePageChange","handleFirstPageClick","handleLastPageClick","pageCount","handleForwardClick","currentPage","handleBackwardsClick","handleFastForwardClick","handleFastBackwardsClick","elements","offset","number","intMultiplier","Math","trunc","items","i","Pagination","Ellipsis","active","total","First","Prev","Next","Last","Logger","err","response","alert","status","error","Sentry","info","msg","console","logger","Board","checkAuth","logs","errors","handleLogsPageChange","handleErrorsPageChange","handleSearchPageChange","currentLogsPage","currentErrorsPage","currentSearchPage","filterText","filterService","filteredLogs","filteredErrors","filteredSearch","loading","errorsPageCount","logsPageCount","itemsPerPage","handleTabClick","completeSearchRequest","searchResults","searchPageCount","handleLinkClick","logId","searchedPage","needScrollDown","currentSlicePage","FilterableLogTable","toggleAnimation","names","NAMES","LogTable","lastItem","firstItem","slice","log","LogRow","scrollRef","createRef","date","dateUtc","service","description","link","ref","scrollIntoView","behavior","block","data-log-id","SelectRow","session","dates","NavbarContainer","AuthContext","Consumer","Navbar","bg","sticky","expand","Brand","aria-controls","Collapse","Form","InputGroup","FormControl","handleSearchInput","searchText","Append","Button","icon","faTimesCircle","handleSearchSubmit","Link","serviceInfo","PrivateRoute","ComposedComponent","component","rest","Authentication","isLoggedIn","localStorage","getItem","sessionStorage","render","scrollToTop","window","scrollTo","top","left","faArrowCircleUp","size","serverUrl","cookies","Cookies","auth","fetch","authOrigins","token","fingerprint","isLoadingComplete","isAuthPending","a","FingerprintJS","load","fp","get","result","visitorId","setToken","setAuthPending","checkToken","parsedToken","base64","split","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","join","JSON","parse","parseJwt","exp","floor","Date","now","delay","ms","Promise","resolve","reject","setTimeout","authPromise","path","then","secureAuth","res","json","clear","location","reload","ok","Error","statusText","accessToken","catch","e","resource","options","req","Request","destOrigin","URL","url","origin","includes","headers","set","Response","ReadableStream","loadFingerprint","getLoadingStatus","checkAuthPending","secureFetch","createContext","App","history","useHistory","ItemsPerPage","useLocation","useRouteMatch","PreloadPageCount","useState","setUser","setPass","setConfirmPass","setPasswordMatch","setSearchText","setCompleteSearchRequest","setSubmitted","setCanRememberMe","setIsAuthenticated","isAuthorized","setIsAuthorized","selectedSessionId","setSelectedSessionId","selectedSession","setSelectedSession","setSessions","services","setServices","setFilenames","selectedFilename","setSelectedFilename","selectedService","setSelectedService","setFilterText","setLoading","setCurrentTab","setLogsPageCount","setErrorsPageCount","setSearchPageCount","selectedLogId","setSelectedLogId","setSearchedPage","searchedSessionId","setSearchedSessionId","setSearchedFilename","setCurrentLogsPage","setCurrentErrorsPage","setCurrentSearchPage","isFingerprintReady","setIsFingerprintReady","setDateRange","startDate","endDate","isOpen","setIsOpen","setNeedScrollDown","setOffset","fetchedLogsLength","setFetchedLogsLength","fetchedErrorsLength","setFetchedErrorsLength","fetchedSearchLength","setFetchedSearchLength","setCurrentSlicePage","setIsGoingForward","setIsGoingBackwards","forwardPreloadLogs","setForwardPreloadLogs","backwardPreloadLogs","setBackwardPreloadLogs","currentLogSlice","setCurrentLogSlice","isLoadingSilent","setIsLoadingSilent","isFetchSuccessful","setIsFetchSuccessful","fetchedLogsSlice","setFetchedLogsSlice","fetchedErrorsSlice","setFetchedErrorsSlice","fetchedSearchSlice","setFetchedSearchSlice","fetchedFirstLogRowId","setFetchedFirstLogRowId","isLogsUpdateNeeded","setIsLogsUpdateNeeded","isErrorsUpdateNeeded","setIsErrorsUpdateNeeded","logsOffset","setLogsOffset","errorsOffset","setErrorsOffset","onInputClick","onClickOutside","open","selectsRange","update","isClearable","placeholderText","maxDate","dateFormat","showYearDropdown","dateFormatCalendar","yearDropdownItemNumber","scrollableYearDropdown","todayButton","strictParsing","passV","confirmPassV","isChecked","checked","handleErrorAlert","goToHomepage","resetPagination","go","goToLoginPage","clearAndLogout","checkNeedLoading","getTotalLength","len","input","login","password","rememberMe","process","method","body","stringify","setItem","handleGetLogsSessions","logsInputs","handleGetLogsSliceByDate","sessionInputs","filename","limit","logsCount","currentLogs","backLogs","forwardLogs","handleGetLogsSliceBySession","sessionId","handleGetErrorsSliceBySession","errorsCount","currentErrors","backErrors","forwardErrors","handleGetErrorsSliceByDate","confirmPassword","preventDefault","SendRegisterRequest","countOffsetJump","page","isNumOutOfSequence","num","start","end","handleSetOffsetSilent","dif","getCurrentSliceIndex","n","countSliceOffset","getLogsSessions","removeItem","handleOffset","useEffect","isNaN","results","fetchLogs","authorize","handleGetLogServiceInfo","countSearchedPage","getSearchedPage","Provider","searchInput","remove","handleFilterTextInput","handleSelectServiceChange","exact","dataset","linkInputs","Boolean","hostname","match","dsn","release","npm_package_version","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2969fe66.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function DotsLoader(props){\r\n\r\n    // var element = (\r\n    //     <span>\r\n    //         <div className=\"bounce1\"></div>\r\n    //         <div className=\"bounce2\"></div>\r\n    //         <div className=\"bounce3\"></div>\r\n    //     </span>    \r\n    // )\r\n\r\n    if (props.color === \"white\" ) {\r\n        return(\r\n        <div className=\"spinner-white\">\r\n            <div className=\"bounce1\"></div>\r\n            <div className=\"bounce2\"></div>\r\n            <div className=\"bounce3\"></div>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    if (props.color === \"blue\" ) {\r\n        return(\r\n        <div className=\"spinner-blue\">\r\n            <div className=\"bounce1\"></div>\r\n            <div className=\"bounce2\"></div>\r\n            <div className=\"bounce3\"></div>\r\n        </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}","import React, { Component } from \"react\";\r\nimport DotsLoader from './dots.pulse.loader';\r\n\r\nexport default class Login extends Component {\r\n    render() {\r\n        return (\r\n            \r\n                \r\n               \r\n            <div>{this.props.submitted \r\n                 ? <div><DotsLoader color = \"white\"/></div>\r\n                 :<div className=\"auth-wrapper\">\r\n                 <div className=\"auth-inner\">\r\n                 <form>\r\n                    <h3>HSM Wallet Logs Access</h3>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Username</label>\r\n                        <input name=\"user\" type=\"text\" className=\"form-control\" placeholder=\"Enter username\"\r\n                        value={this.props.user} onChange={this.props.handleUsernameInput}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Password</label>\r\n                        <input name=\"pass\" type=\"password\" className=\"form-control\" placeholder=\"Enter password\"\r\n                        value={this.props.pass} onChange={this.props.handlePassInput}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <div className=\"custom-control custom-checkbox\">\r\n                            <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" defaultChecked={this.props.canRememberMe} onChange={this.props.handleRememberMeCheckbox} />\r\n                            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block\" onClick={this.props.handleLoginSubmit}>Submit</button>\r\n                    <p className=\"forgot-password text-right\">\r\n                        Not registered yet? <a href=\"/#/registration\">Sign up</a>\r\n                    </p>\r\n                </form>\r\n                </div>\r\n                </div>\r\n                }</div>\r\n                \r\n                \r\n            \r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport LoginComponent from \"./login.component\"\r\n// import Cookies from 'universal-cookie'\r\n\r\n// const cookies = new Cookies()\r\n\r\nclass LoginContainer extends React.Component {\r\n\r\n\r\n  render() {\r\n    // var cookie = cookies.get('rtoken')\r\n    // if (cookie !== undefined) {\r\n    //   return <Redirect to=\"/\" />\r\n    // }\r\n    return <LoginComponent user={this.props.user} pass={this.props.pass} handleUsernameInput={this.props.handleUsernameInput}\r\n      handlePassInput={this.props.handlePassInput} handleLoginSubmit={this.props.handleLoginSubmit}\r\n      handleRememberMeCheckbox={this.props.handleRememberMeCheckbox} canRememberMe={this.props.canRememberMe}\r\n      submitted={this.props.submitted}/>;\r\n  }\r\n}\r\n\r\nexport default (LoginContainer)","import React, { Component } from \"react\";\r\nimport { Redirect } from 'react-router-dom'\r\nimport DotsLoader from './dots.pulse.loader';\r\n\r\n\r\nexport default class Logout extends Component {\r\n\r\nhandleRender = () => {\r\n    if (!this.props.isAuthenticated) {\r\n        return <Redirect to=\"/\" />\r\n    } else {\r\n        this.props.handleLogoutSubmit()\r\n        return <DotsLoader color=\"white\" />\r\n    }\r\n}\r\n\r\n// componentDidMount(){\r\n// }\r\n\r\n\r\nrender() {\r\n    return (\r\n        <div>\r\n            {this.handleRender()}\r\n            {/* {this.props.handleLogoutSubmit()} */}\r\n        </div>\r\n    )\r\n}\r\n}\r\n{/* <div className=\"auth-wrapper\">\r\n<div className=\"auth-inner\">\r\n<h3>Logout Success</h3>\r\n</div>\r\n</div> */}","import React, { Component } from \"react\";\r\n\r\n\r\nexport default class Register extends Component {\r\n    render() {\r\n        return (<div className=\"auth-wrapper\">\r\n            <div className=\"auth-inner\">\r\n                <form>\r\n                    <h3> Registration </h3>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label > Username </label>\r\n                        <input name=\"user\"\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Enter username\"\r\n                            value={this.props.user}\r\n                            onChange={this.props.handleUsernameInput}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\" > {this.props.passwordMatch ? <label> Password </label> : <label id=\"passMatch\">Passwords do not match</label >}\r\n                        <input name=\"pass\"\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Enter password\"\r\n                            value={this.props.pass}\r\n                            onChange={this.props.handlePassInput}\r\n                            required\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\" >\r\n                        <input name=\"confirmPass\"\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Confirm password\"\r\n                            value={this.props.confirmPass}\r\n                            onChange={this.props.handleConfirmPassInput}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\"\r\n                        className=\"btn btn-primary btn-block\"\r\n                        onClick={this.props.handleRegisterSubmit}\r\n                        disabled={!this.props.passwordMatch}\r\n                    >\r\n                        Register </button>\r\n                    <p className=\"forgot-password text-right\" >\r\n                        Already registered ? < a href=\"/#/login\" > Sign in </a>\r\n                    </p>\r\n                </form>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Container, Row, Col, Tab, Nav, Dropdown, NavItem, NavLink, Form } from 'react-bootstrap/'\r\nimport Datetime from 'react-datetime'\r\nimport moment from 'moment'\r\n\r\nexport default class NavTabs extends Component {\r\n\r\n\r\n\r\n  buildTabsRow = () => {\r\n    var tabsRowElements = []\r\n    this.props.tabsArray.forEach((element, index) => {\r\n      tabsRowElements.push(\r\n        <NavItem onClick={() => this.props.onTabClick(index)} key={index.toString()}>\r\n          <NavLink eventKey={element}>{element}</NavLink>\r\n        </NavItem>\r\n      )\r\n    })\r\n    return tabsRowElements\r\n  }\r\n\r\n  buildTabsContent = () => {\r\n    var tabsContentElements = []\r\n    const propContent = this.props.contents\r\n\r\n    this.props.tabsArray.forEach((element, index) => {\r\n      tabsContentElements.push(\r\n        <Tab.Pane eventKey={element} key={index.toString()}>\r\n          {propContent[index]}\r\n        </Tab.Pane>\r\n      )\r\n    })\r\n    return tabsContentElements\r\n  }\r\n\r\n  buildUnorderedDropdown = (dropdownName, dropdownSelected, selectChange, list, align) => {\r\n    var dropdownValue = dropdownName\r\n    if (dropdownSelected !== \"\") {\r\n      dropdownValue = dropdownSelected\r\n    }\r\n    if (align === \"left\") {\r\n      return (\r\n        <NavItem className=\"ml-auto\">\r\n          <DropdownTabUnorderedSelect\r\n            handleSelectChange={selectChange}\r\n            data={list}\r\n            value={dropdownValue}\r\n          />\r\n        </NavItem>\r\n      )\r\n    }\r\n    return (\r\n      <NavItem className=\"mr-auto\">\r\n        <DropdownTabUnorderedSelect\r\n          handleSelectChange={selectChange}\r\n          data={list}\r\n          value={dropdownValue}\r\n        />\r\n      </NavItem>\r\n    )\r\n  }\r\n  buildOrderedDropdown = (dropdownName, dropdownSelected, selectChange, list, align) => {\r\n    var dropdownValue = dropdownName\r\n    if (dropdownSelected !== \"\") {\r\n      dropdownValue = dropdownSelected\r\n    }\r\n    if (align === \"left\") {\r\n      return (\r\n        <NavItem className=\"ml-auto\">\r\n          <DropdownTabOrderedSelect\r\n            handleSelectChange={selectChange}\r\n            data={list}\r\n            value={dropdownValue}\r\n          />\r\n        </NavItem>\r\n      )\r\n    }\r\n    return (\r\n      <NavItem className=\"mr-auto\">\r\n        <DropdownTabOrderedSelect\r\n          handleSelectChange={selectChange}\r\n          data={list}\r\n          value={dropdownValue}\r\n        />\r\n      </NavItem>\r\n    )\r\n  }\r\n\r\n  buildSessionsDropdown = () => {\r\n    if (this.props.sessions === undefined) {\r\n      return null\r\n    }\r\n    var dropdownValue = \"Select session\"\r\n    if (this.props.sessionsDropdownValue !== \"\") {\r\n      dropdownValue = this.props.sessionsDropdownValue\r\n    }\r\n    return (\r\n      <NavItem className=\"ml-auto\">\r\n        <DropdownTabOrderedSelect\r\n          handleSelectChange={this.props.handleSelectSessionChange}\r\n          data={this.props.sessions}\r\n          value={dropdownValue}\r\n        />\r\n      </NavItem>\r\n    )\r\n  }\r\n\r\n  buildFilenamesDropdown = () => {\r\n    if (this.props.filenames === undefined) {\r\n      return null\r\n    }\r\n    var dropdownValue = \"Select Log Name\"\r\n    if (this.props.logsDropdownValue !== \"\") {\r\n      dropdownValue = this.props.logsDropdownValue\r\n    }\r\n    return (\r\n      <NavItem>\r\n        <DropdownTabUnorderedSelect\r\n          handleSelectChange={this.props.handleSelectFilenameChange}\r\n          data={this.props.filenames}\r\n          value={dropdownValue}\r\n        />\r\n      </NavItem>\r\n    )\r\n  }\r\n\r\n  buildDTP = () => {\r\n    return (\r\n      <NavItem>\r\n        <MyDTPicker />\r\n      </NavItem>\r\n    )\r\n  }\r\n\r\n  buildDTP2 = () => {\r\n    return (\r\n      <NavItem as={Datetime}>\r\n      </NavItem>\r\n    )\r\n  }\r\n\r\n  buildSessionString = () => {\r\n    if (this.props.sessionsDropdownValue !== '') {\r\n      return (\r\n        <p className=\"session-text\">Selected session: {this.props.sessionsDropdownValue}</p>\r\n      )\r\n    }\r\n    if (this.props.dateRange !== undefined && this.props.dateRange[0] !== null && this.props.dateRange[1] !== null) {\r\n  \r\n      return (\r\n        <p className=\"session-text\">Selected session: {moment(this.props.dateRange[0]).format(\"YYYY-MM-DD\")} - {moment(this.props.dateRange[1]).format(\"YYYY-MM-DD\")}</p>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Tab.Container id=\"tabs-with-dropdown\" defaultActiveKey={this.props.tabsArray[this.props.currentTab]}>\r\n          <Row className=\"clearfix\">\r\n            <Col sm={9}>\r\n              <Nav variant=\"tabs\" defaultActiveKey={this.props.tabsArray[this.props.currentTab]}>\r\n                {this.buildTabsRow()}\r\n                {this.buildFilenamesDropdown()}\r\n                {this.buildSessionString()} \r\n                {/* {this.buildSessionsDropdown()} */}\r\n              </Nav>\r\n            </Col>\r\n            <Col sm={3}>\r\n              {this.props.datePicker}\r\n            </Col>\r\n          </Row>\r\n          {/* {this.buildSessionString()} */}\r\n          <Row>\r\n            <Col sm={12}>\r\n              <Tab.Content>{/* < animation> */}\r\n                {this.buildTabsContent()}\r\n              </Tab.Content>\r\n            </Col>\r\n          </Row>\r\n        </Tab.Container>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nclass DropdownTabOrderedSelect extends Component {\r\n  render() {\r\n\r\n    const rows = [];\r\n\r\n    this.props.data.forEach((d) => {\r\n      const value = d.value;\r\n      var id = 0\r\n      id = d.id;\r\n      rows.push(\r\n        <Dropdown.Item\r\n          eventKey={id}\r\n          data-key={id}\r\n          key={id.toString()}>\r\n          {id + \".    \" + value}\r\n        </Dropdown.Item>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Dropdown as={NavItem} onSelect={this.props.handleSelectChange}>\r\n        <Dropdown.Toggle as={NavLink}>{this.props.value}</Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          {rows}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n}\r\n\r\nclass DropdownTabUnorderedSelect extends Component {\r\n  render() {\r\n\r\n    const rows = [];\r\n\r\n    this.props.data.forEach((d) => {\r\n      const value = d.value;\r\n      var id = 0\r\n      id = d.id;\r\n      rows.push(\r\n        <Dropdown.Item\r\n          eventKey={id}\r\n          data-key={id}\r\n          key={id.toString()}>\r\n            {value}\r\n        </Dropdown.Item>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Dropdown as={NavItem} onSelect={this.props.handleSelectChange}>\r\n        <Dropdown.Toggle as={NavLink}>{this.props.value}</Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          {rows}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n}\r\n\r\nclass MyDTPicker extends React.Component {\r\n  render() {\r\n    return <Datetime renderInput={this.renderInput} />;\r\n  }\r\n  renderInput(props, openCalendar, closeCalendar) {\r\n    function clear() {\r\n      props.onChange({ target: { value: \"\" } });\r\n    }\r\n    return (\r\n      <div>\r\n        <input {...props} />\r\n        <button onClick={openCalendar}>open calendar</button>\r\n        <button onClick={closeCalendar}>close calendar</button>\r\n        <button onClick={clear}>clear</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {Pagination} from 'react-bootstrap'\r\nimport PageItem from 'react-bootstrap/PageItem'\r\nimport { loggers } from \"winston\";\r\n\r\n\r\n\r\nexport default class TablePagination extends Component {\r\n\r\n\r\n     handlePageClick = event => {\r\n        if (event.target.nodeName !== 'SPAN') { \r\n           var pageNumber= parseInt(event.target.text) \r\n           this.props.handlePageChange(pageNumber)\r\n        }\r\n      }\r\n  \r\n       handleFirstPageClick = () => {\r\n        this.props.handlePageChange(1)\r\n      }\r\n  \r\n       handleLastPageClick = () => {\r\n        this.props.handlePageChange(this.props.pageCount )\r\n      }\r\n  \r\n       handleForwardClick = () => {\r\n        if (this.props.pageCount > this.props.currentPage) {\r\n          var pageNumber= this.props.currentPage + 1 \r\n          this.props.handlePageChange(pageNumber)\r\n          \r\n        }\r\n      }\r\n  \r\n       handleBackwardsClick = () => {\r\n        if (this.props.currentPage > 1) {\r\n          var pageNumber= this.props.currentPage - 1\r\n          this.props.handlePageChange(pageNumber)\r\n        }\r\n      }\r\n  \r\n       handleFastForwardClick = () => {\r\n        if (this.props.pageCount - this.props.currentPage > 10) {\r\n          var pageNumber= this.props.currentPage + 10\r\n          this.props.handlePageChange(pageNumber)\r\n        }\r\n      }\r\n  \r\n       handleFastBackwardsClick = () => {\r\n        if (this.props.currentPage > 11) {\r\n          var pageNumber= this.props.currentPage - 11 \r\n          this.props.handlePageChange(pageNumber)\r\n        }\r\n      }\r\n\r\n\r\n\r\n      render() {\r\n        const pageCount = this.props.pageCount\r\n        const currentPage = this.props.currentPage\r\n        \r\n        var elements = 0\r\n        var offset = 0\r\n        switch (true) {\r\n            case (pageCount < 25): \r\n                elements = 25\r\n                offset = 12\r\n                break\r\n            case (pageCount > 25 && currentPage < 90): \r\n                elements = 18\r\n                offset = 9\r\n                break\r\n            case (pageCount > 25 && currentPage < 990): \r\n                elements = 14\r\n                offset = 7\r\n                break\r\n            case (currentPage > 1000): \r\n                elements = 12\r\n                offset = 6\r\n                break\r\n            default: {\r\n              elements = 12\r\n              offset = 6\r\n            }\r\n        }   \r\n        \r\n        var number = 1\r\n        let intMultiplier = Math.trunc(currentPage/elements)\r\n        var sliceNum = currentPage - (elements * intMultiplier)\r\n        let items = [];\r\n\r\n        if (currentPage >= elements * intMultiplier && intMultiplier > 0) {\r\n          number = intMultiplier*elements\r\n        }\r\n        for (var i = 1; i <= elements; i++) {\r\n            if (currentPage > elements - 1 && i === 1 && pageCount > elements) {\r\n                items.push(<Pagination.Ellipsis onClick = {this.handleFastBackwardsClick}/>)\r\n                //number = currentPage - offset + 1\r\n            }\r\n            items.push(\r\n            <Pagination.Item key={number} active={number === currentPage} onClick={this.handlePageClick}>\r\n            {number}\r\n            </Pagination.Item>,\r\n            );\r\n            number++\r\n\r\n\r\n            if (pageCount - currentPage > offset && i === elements) {\r\n                items.push(<Pagination.Ellipsis onClick = {this.handleFastForwardClick}/>)\r\n            }\r\n\r\n            if (number > pageCount) {break}             \r\n        }\r\n\r\n        // var number = 1\r\n        // let items = [];\r\n        // for (var i = 1; i <= elements; i++) {\r\n\r\n        //     if (currentPage > offset && i === 1 && pageCount > 25) {\r\n        //         items.push(<Pagination.Ellipsis onClick = {this.handleFastBackwardsClick}/>)\r\n        //         number = currentPage - offset + 1\r\n        //     }\r\n        //     items.push(\r\n        //     <Pagination.Item key={number} active={number === currentPage} onClick={this.handlePageClick}>\r\n        //     {number}\r\n        //     </Pagination.Item>,\r\n        //     );\r\n        //     number++\r\n\r\n\r\n        //     if (pageCount - currentPage > offset && i === elements) {\r\n        //         items.push(<Pagination.Ellipsis onClick = {this.handleFastForwardClick}/>)\r\n        //     }\r\n\r\n        //     if (number > pageCount) {break}             \r\n        // }\r\n\r\n\r\n        return (\r\n        <div>\r\n            <Pagination \r\n            // current={this.props.current}\r\n             // currentPage={currentPage}\r\n              //currentPage={currentPage}\r\n              total={this.props.pageCount}\r\n            // showLessItems\r\n            // showTitle={false}\r\n            >\r\n                <Pagination.First onClick = {this.handleFirstPageClick}/>\r\n                <Pagination.Prev onClick = {this.handleBackwardsClick}  />\r\n                {items}\r\n                <Pagination.Next onClick = {this.handleForwardClick} />\r\n                <Pagination.Last onClick = {this.handleLastPageClick} />\r\n            </Pagination>  \r\n        </div>\r\n        )\r\n      }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//   Backup if needed to rise CurrentPage state into App\r\n            // const handlePageClick = event => {\r\n            //     if (event.target.nodeName !== 'SPAN') { \r\n            //        setCurrentPage(parseInt(event.target.text))\r\n            //     }\r\n            //   }\r\n          \r\n            //   const handleFirstPageClick = () => {\r\n            //     setCurrentPage(1)\r\n            //   }\r\n          \r\n            //   const handleLastPageClick = () => {\r\n            //     setCurrentPage(logsArrayLenght)\r\n            //   }\r\n          \r\n            //   const handleForwardClick = () => {\r\n            //     if (logsArrayLenght > currentPage) {\r\n            //       setCurrentPage(currentPage + 1)\r\n            //     }\r\n            //   }\r\n          \r\n            //   const handleBackwardsClick = () => {\r\n            //     if (currentPage > 1) {\r\n            //       setCurrentPage(currentPage - 1)\r\n            //     }\r\n            //   }\r\n          \r\n            //   const handleFastForwardClick = () => {\r\n            //     if (logsArrayLenght - currentPage > 5) {\r\n            //       setCurrentPage(currentPage + 5)\r\n            //     }\r\n            //   }\r\n          \r\n            //   const handleFastBackwardsClick = () => {\r\n            //     if (currentPage > 6) {\r\n            //       setCurrentPage(currentPage - 5)\r\n            //     }\r\n            //   }\r\n","import * as Sentry from '@sentry/react';\r\n\r\n\r\nexport default function Logger() {\r\n    function err(err) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        console.log(err)\r\n      }\r\n      if (err.response !== undefined) {\r\n          alert(err.response.status + ': ' + err.response.data.error)\r\n      }\r\n      return Sentry.captureException(err)\r\n    }\r\n    function info(msg) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        console.log(msg)\r\n      }\r\n      return Sentry.captureMessage(msg)\r\n    }\r\n    function local(msg) {\r\n      if (process.env.NODE_ENV === 'production') {\r\n        return\r\n      }\r\n      console.log(msg)\r\n      return\r\n    }\r\n    return {\r\n      err: err,\r\n      info: info,\r\n      console: local\r\n    }\r\n  }","import React, { Component,  useState } from \"react\";\r\nimport DotsLoader from './dots.pulse.loader'\r\nimport NavTabs from './navtabs.component'\r\nimport TablePagination from './tablePagination.component'\r\nimport Logger from \"../utils/logger\"\r\n\r\n\r\nconst logger = new Logger()\r\n\r\n\r\nexport default class Board extends Component {\r\n  // constructor(props) {\r\n  //   super(props)\r\n  //   this.handleLogsPageChange = this.handleLogsPageChange.bind(this)\r\n  //   this.handleErrorsPageChange = this.handleErrorsPageChange.bind(this)\r\n  //   this.handleSearchPageChange = this.handleSearchPageChange.bind(this)\r\n  //   // this.handleTabClick = this.handleTabClick.bind(this)\r\n  //   this.state = { currentLogsPage: 1, currentErrorsPage: 1, currentSearchPage: 1 }\r\n  // }\r\n\r\n  // handleLogsPageChange(page) {\r\n  //   logger.console(\"Setting State Logs Page\")\r\n  //   this.setState({ currentLogsPage: page })\r\n  // }\r\n\r\n  // handleErrorsPageChange(page) {\r\n  //   logger.console(\"Setting State Errors Page\")\r\n  //   this.setState({ currentErrorsPage: page })\r\n  // }\r\n\r\n  // handleSearchPageChange(page) {\r\n  //   logger.console(\"Setting State Search Page\")\r\n  //   this.setState({ currentSearchPage: page })\r\n  // }\r\n\r\n\r\n\r\n  checkAuth = (props) => {\r\n\r\n    var element = <DotsLoader color=\"white\" />\r\n\r\n    if (this.props.filenames[0] !== undefined) {\r\n      //logger.console(\"Rendering Filterable Table\")\r\n      element = (<div className='board-inner'>\r\n        <FilterableLogTable\r\n          logs={this.props.logs}\r\n          errors={this.props.errors}\r\n          handleSelectSessionChange={this.props.handleSelectSessionChange}\r\n          handleSelectFilenameChange={this.props.handleSelectFilenameChange}\r\n          handleLogsPageChange = {this.props.handleLogsPageChange}\r\n          handleErrorsPageChange = {this.props.handleErrorsPageChange}\r\n          handleSearchPageChange = {this.props.handleSearchPageChange}\r\n          currentLogsPage={this.props.currentLogsPage}\r\n          currentErrorsPage={this.props.currentErrorsPage}\r\n          currentSearchPage={this.props.currentSearchPage}\r\n          sessions={this.props.sessions}\r\n          logsDropdownValue={this.props.logsDropdownValue}\r\n          sessionsDropdownValue={this.props.sessionsDropdownValue}\r\n          filterText={this.props.filterText}\r\n          filterService={this.props.filterService}\r\n          filteredLogs={this.props.filteredLogs}\r\n          filteredErrors={this.props.filteredErrors}\r\n          filteredSearch={this.props.filteredSearch}\r\n          loading={this.props.loading}\r\n          errorsPageCount={this.props.errorsPageCount}\r\n          logsPageCount={this.props.logsPageCount}\r\n          itemsPerPage={this.props.itemsPerPage}\r\n          currentTab={this.props.currentTab}\r\n          handleTabClick={this.props.handleTabClick}\r\n          completeSearchRequest={this.props.completeSearchRequest}\r\n          searchResults={this.props.searchResults}\r\n          searchPageCount={this.props.searchPageCount}\r\n          handleLinkClick={this.props.handleLinkClick}\r\n          logId={this.props.logId}\r\n          searchedPage={this.props.searchedPage}\r\n          filenames={this.props.filenames}\r\n          datePicker={this.props.datePicker}\r\n          dateRange={this.props.dateRange}\r\n          needScrollDown={this.props.needScrollDown}\r\n          currentSlicePage = {this.props.currentSlicePage}\r\n        />\r\n      </div>)\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {element}\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    //logger.console(\"Rendering Board\")\r\n    return (\r\n      this.checkAuth()\r\n    )\r\n  }\r\n}\r\n\r\nclass FilterableLogTable extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n\r\n  tabsArray = [\"Logs\", \"Errors\"]\r\n  // firstTab = \"Logs\"\r\n  // secondTab = \"Errors\"\r\n\r\n \r\n\r\n  toggleAnimation = () => {\r\n    // var elements = []\r\n    // this.tabsArray.forEach(() => {\r\n    //   elements.push(<DotsLoader color=\"blue\" />)\r\n    // });\r\n    // logger.console(\"building blue loader\")\r\n    // //var elements = [<DotsLoader color = \"blue\"/>]\r\n\r\n    if (this.props.loading === true) {\r\n      logger.console(\"LOADING Board Content\")\r\n      return (<DotsLoader color=\"blue\" />)\r\n    }\r\n\r\n    var elements = []\r\n    logger.console(\"passing content into tabs\")\r\n    elements.push(\r\n      <div>\r\n        <TablePagination\r\n          currentPage={this.props.currentLogsPage}\r\n          pageCount={this.props.logsPageCount}\r\n          handlePageChange={this.props.handleLogsPageChange}\r\n        />\r\n        <LogTable\r\n          names={NAMES}\r\n          logs={this.props.logs}\r\n          itemsPerPage={this.props.itemsPerPage}\r\n          currentPage={this.props.currentSlicePage}\r\n          filterText={this.props.filterText}\r\n          filterService={this.props.filterService}\r\n          filteredLogs={this.props.filteredLogs}\r\n          handleLinkClick={this.props.handleLinkClick}\r\n          logId={this.props.logId}\r\n          needScrollDown={this.props.needScrollDown}\r\n        />\r\n        <TablePagination\r\n          currentPage={this.props.currentLogsPage}\r\n          pageCount={this.props.logsPageCount}\r\n          handlePageChange={this.props.handleLogsPageChange}\r\n        />\r\n      </div>\r\n    )\r\n\r\n    elements.push(\r\n      <div>\r\n        <TablePagination\r\n          currentPage={this.props.currentErrorsPage}\r\n          pageCount={this.props.errorsPageCount}\r\n          handlePageChange={this.props.handleErrorsPageChange}\r\n        />\r\n        <LogTable\r\n          names={NAMES}\r\n          logs={this.props.logs}\r\n          itemsPerPage={this.props.itemsPerPage}\r\n          currentPage={this.props.currentSlicePage}\r\n          filterText={this.props.filterText}\r\n          filterService={this.props.filterService}\r\n          filteredLogs={this.props.filteredErrors}\r\n          handleLinkClick={this.props.handleLinkClick}\r\n          logId={this.props.logId}\r\n          needScrollDown={this.props.needScrollDown}\r\n        />\r\n        <TablePagination\r\n          currentPage={this.props.currentErrorsPage}\r\n          pageCount={this.props.errorsPageCount}\r\n          handlePageChange={this.props.handleErrorsPageChange}\r\n        />\r\n\r\n      </div>\r\n    )\r\n\r\n\r\n   // if (this.props.searchResults !== undefined && (this.props.searchResults).length !== 0) {\r\n     if (this.props.completeSearchRequest !== '') {\r\n      logger.console(\"Searching...\")\r\n      logger.console(this.props.searchResults)\r\n      return (\r\n        <div>\r\n          <TablePagination\r\n            currentPage={this.props.currentSearchPage}\r\n            pageCount={this.props.searchPageCount}\r\n            handlePageChange={this.props.handleSearchPageChange}\r\n          />\r\n          <LogTable\r\n            names={NAMES}\r\n            logs={this.props.logs}\r\n            itemsPerPage={this.props.itemsPerPage}\r\n            currentPage={this.props.currentSlicePage}\r\n            filterText={this.props.filterText}\r\n            filterService={this.props.filterService}\r\n            filteredSearch={this.props.filteredSearch}\r\n            handleLinkClick={this.props.handleLinkClick}\r\n            logId={this.props.logId}\r\n            needScrollDown={this.props.needScrollDown}\r\n          />\r\n          <TablePagination\r\n            currentPage={this.props.currentSearchPage}\r\n            pageCount={this.props.searchPageCount}\r\n            handlePageChange={this.props.handleSearchPageChange}\r\n          />\r\n        </div>\r\n      )\r\n    } else {\r\n      logger.console(\"building NAVTABS\")\r\n      return (\r\n\r\n        <NavTabs\r\n          tabsArray={this.tabsArray}\r\n          handleSelectSessionChange={this.props.handleSelectSessionChange}\r\n          handleSelectFilenameChange={this.props.handleSelectFilenameChange}\r\n          sessions={this.props.sessions}\r\n          filenames={this.props.filenames}\r\n          logsDropdownValue={this.props.logsDropdownValue}\r\n          sessionsDropdownValue={this.props.sessionsDropdownValue}\r\n          contents={elements}\r\n          onTabClick={this.props.handleTabClick}\r\n          currentTab={this.props.currentTab}\r\n          datePicker={this.props.datePicker}\r\n          dateRange={this.props.dateRange}\r\n        />\r\n\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      this.toggleAnimation()\r\n    );\r\n  }\r\n}\r\n\r\nclass LogTable extends Component {\r\n\r\n\r\n  render() {\r\n\r\n\r\n    const filterText = this.props.filterText;\r\n    const filterService = this.props.filterService\r\n\r\n    var i = 0\r\n    const rows = [];\r\n    var itemsPerPage = this.props.itemsPerPage\r\n    var currentPage = this.props.currentPage\r\n\r\n    let lastItem = (currentPage + 1) * itemsPerPage\r\n    let firstItem = currentPage * itemsPerPage\r\n\r\n\r\n    if (filterText === \"\" && filterService === \"\") {\r\n      let logs = this.props.logs\r\n      let slice = logs.slice(firstItem, lastItem)\r\n      slice.forEach((log) => {\r\n        rows.push(\r\n          <LogRow\r\n            handleLinkClick={this.props.handleLinkClick}\r\n            logId={this.props.logId}\r\n            needScrollDown={this.props.needScrollDown}\r\n            log={log}\r\n            key={log.id}\r\n          />\r\n        );\r\n      });\r\n    }\r\n\r\n    if (this.props.filteredLogs !== undefined) {\r\n      var filteredLogs = this.props.filteredLogs\r\n      let slice = filteredLogs.slice(firstItem, lastItem)\r\n      slice.forEach((log) => {\r\n        rows.push(\r\n          <LogRow\r\n            logId={this.props.logId}\r\n            handleLinkClick={this.props.handleLinkClick}\r\n            needScrollDown={this.props.needScrollDown}\r\n            log={log}\r\n            key={log.id}\r\n\r\n          />\r\n        );\r\n      });\r\n    }\r\n\r\n    if (this.props.filteredSearch !== undefined) {\r\n      var filteredSearch = this.props.filteredSearch\r\n      let slice = filteredSearch.slice(firstItem, lastItem)\r\n      slice.forEach((log) => {\r\n        rows.push(\r\n          <LogRow\r\n            logId={this.props.logId}\r\n            handleLinkClick={this.props.handleLinkClick}\r\n            needScrollDown={this.props.needScrollDown}\r\n            log={log}\r\n            key={log.id}\r\n          />\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <td id=\"datecol\">Date</td>\r\n            <td id=\"servcol\">Service</td>\r\n            <td id=\"desccol\">Description</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{rows}</tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// class LogTable extends Component {\r\n\r\n\r\n//   render() {\r\n\r\n\r\n//     const filterText = this.props.filterText;\r\n//     const filterService = this.props.filterService\r\n\r\n//     var i = 0\r\n//     const rows = [];\r\n//     var itemsPerPage = this.props.itemsPerPage\r\n//     var currentPage = this.props.currentPage\r\n\r\n//     let lastItem = currentPage * itemsPerPage\r\n//     let firstItem = (currentPage - 1) * itemsPerPage\r\n\r\n\r\n//     if (filterText === \"\" && filterService === \"\") {\r\n//       let logs = this.props.logs\r\n//       let slice = logs.slice(firstItem, lastItem)\r\n//       slice.forEach((log) => {\r\n//         rows.push(\r\n//           <LogRow\r\n//             handleLinkClick={this.props.handleLinkClick}\r\n//             logId={this.props.logId}\r\n//             needScrollDown={this.props.needScrollDown}\r\n//             log={log}\r\n//             key={log.id}\r\n//           />\r\n//         );\r\n//       });\r\n//     }\r\n\r\n//     if (this.props.filteredLogs !== undefined) {\r\n//       var filteredLogs = this.props.filteredLogs\r\n//       let slice = filteredLogs.slice(firstItem, lastItem)\r\n//       slice.forEach((log) => {\r\n//         rows.push(\r\n//           <LogRow\r\n//             logId={this.props.logId}\r\n//             handleLinkClick={this.props.handleLinkClick}\r\n//             needScrollDown={this.props.needScrollDown}\r\n//             log={log}\r\n//             key={log.id}\r\n\r\n//           />\r\n//         );\r\n//       });\r\n//     }\r\n\r\n//     if (this.props.filteredSearch !== undefined) {\r\n//       var filteredSearch = this.props.filteredSearch\r\n//       let slice = filteredSearch.slice(firstItem, lastItem)\r\n//       slice.forEach((log) => {\r\n//         rows.push(\r\n//           <LogRow\r\n//             logId={this.props.logId}\r\n//             handleLinkClick={this.props.handleLinkClick}\r\n//             needScrollDown={this.props.needScrollDown}\r\n//             log={log}\r\n//             key={log.id}\r\n//           />\r\n//         );\r\n//       });\r\n//     }\r\n\r\n//     return (\r\n\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <td id=\"datecol\">Date</td>\r\n//             <td id=\"servcol\">Service</td>\r\n//             <td id=\"desccol\">Description</td>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>{rows}</tbody>\r\n//       </table>\r\n//     );\r\n//   }\r\n// }\r\n\r\n\r\nclass LogRow extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.scrollRef = React.createRef()\r\n  }\r\n\r\n  render() {\r\n\r\n    const scrollTo = (ref) => {\r\n      if (ref && this.props.needScrollDown) {\r\n        ref.scrollIntoView({ behavior: 'smooth', block: 'center' })\r\n      }\r\n    }\r\n\r\n    //<div ref={scrollTo}>Item</div>\r\n    const log = this.props.log\r\n    const id = log.id\r\n    const date = log.dateUtc;\r\n    const service = log.service;\r\n    const description = log.description;\r\n    const link = \"http://localhost:5000/v2/private/getLogById?id=\" + id\r\n\r\n    if (log.id === this.props.logId) {\r\n      logger.console(\"Found log\")\r\n      return (\r\n        <tr className=\"selectedRow\" ref={scrollTo}>\r\n          <td id=\"datecol\"><a href={link} onClick={this.props.handleLinkClick} data-log-id={id}>{date}</a></td>\r\n          <td id=\"servcol\">{service}</td>\r\n          <td id=\"desccol\">{description}</td>\r\n        </tr>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <tr>\r\n        <td id=\"datecol\"><a href={link} onClick={this.props.handleLinkClick} data-log-id={id}  className=\"table-link\">{date}</a></td>\r\n        <td id=\"servcol\">{service}</td>\r\n        <td id=\"desccol\">{description}</td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nclass SelectRow extends Component {\r\n  render() {\r\n    const session = this.props.session\r\n    const dates = session.dates;\r\n    var id = 0\r\n    id = session.id;\r\n\r\n    return (\r\n      <option data-key={id}>{id + \".    \" + dates}</option>\r\n    );\r\n  }\r\n}\r\n\r\nclass DropdownSelect extends Component {\r\n  render() {\r\n\r\n    const rows = [];\r\n\r\n    this.props.sessions.forEach((session) => {\r\n      rows.push(\r\n        <SelectRow\r\n          session={session}\r\n          key={session.id}\r\n          id={session.id}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"filter-component\">\r\n        <select\r\n          value={this.props.value}\r\n          onChange={this.props.handleSelectSessionChange}>\r\n          <option value=\"\" selected disabled hidden>Select session</option>\r\n          {rows}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n{/* <NavDropdown eventKey=\"3\" title={this.props.value} id=\"nav-dropdown-within-tab\" onSelect={this.props.handleSelectSessionChange}>\r\n          {rows}\r\n        </NavDropdown>  */}\r\n\r\n\r\n\r\nconst NAMES = { id: 0, date: \"Date\", service: \"Source\", description: \"Description\" }\r\n  // class SearchBar extends Component {\r\n  //   constructor(props) {\r\n  //     super(props);\r\n  //     this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n  //   }\r\n\r\n  //   handleFilterTextChange(e) {\r\n  //     this.props.handleFilterTextChange(e.target.value);\r\n  //   }\r\n\r\n\r\n  //   render() {\r\n  //     return (\r\n  //       <div className=\"filter-component\">\r\n  //       <DropdownSelect\r\n  //           handleSelectSessionChange = {this.props.handleSelectSessionChange}\r\n  //           sessions = {this.props.sessions}\r\n  //           value = {this.props.value}\r\n  //         />\r\n  //       <form id=\"board-filter\"> \r\n  //         <input\r\n  //           type=\"text\"\r\n  //           placeholder=\"Filter\"\r\n  //           value={this.props.filterText}\r\n  //           onChange={this.handleFilterTextChange}\r\n  //         />\r\n  //       </form>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  // }\r\n\r\n  // class FilterableLogTable extends Component {\r\n  //   constructor(props) {\r\n  //     super(props);\r\n  //     this.state = {\r\n  //       filterText: ''\r\n  //     };\r\n\r\n\r\n  //     this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n  //   }\r\n\r\n  //   handleFilterTextChange(filterText) {\r\n  //     this.setState({\r\n  //       filterText: filterText\r\n  //     });\r\n  //   }\r\n\r\n  //   render() {\r\n  //     return (\r\n  //       <div>\r\n  //         <SearchBar\r\n  //         handleSelectSessionChange = {this.props.handleSelectSessionChange}\r\n  //         sessions = {this.props.sessions}\r\n  //         value = {this.props.value}\r\n  //         filterText={this.state.filterText}\r\n  //         handleFilterTextChange={this.handleFilterTextChange}\r\n  //         />\r\n  //         <LogTable\r\n  //           names = {NAMES}\r\n  //           logs={this.props.logs}\r\n  //           filterText={this.state.filterText}\r\n  //         />\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  // }\r\n\r\n\r\n\r\n\r\n//   ReactDOM.render(\r\n//     <FilterableProductTable products={PRODUCTS} />,\r\n//     document.getElementById('container')\r\n//   );","import React, { Component } from \"react\";\r\nimport { Navbar, Nav, Form, FormControl, Button, InputGroup } from \"react-bootstrap\";\r\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { AuthContext } from '../App'\r\n\r\nexport default class NavbarContainer extends Component {\r\n  render() {\r\n    return (\r\n      <AuthContext.Consumer>\r\n        { value =>\r\n          !value.isAuthenticated\r\n            ? <div></div>\r\n            : <Navbar bg=\"primary\" variant=\"dark\" sticky=\"top\" expand=\"lg\" className=\"navbar\" >\r\n              <Nav className=\"col mr-4 justify-content-start\">\r\n                <Navbar.Brand href=\"/\">HSM Logs</Navbar.Brand>\r\n              </Nav>\r\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n              <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"col-auto justify-content-space-between\">\r\n                  <Form className=\"search-bar\">\r\n                    <InputGroup className=\"nav-group\">\r\n                      <FormControl\r\n                        onChange={this.props.handleSearchInput}\r\n                        value={this.props.searchText}\r\n                        type=\"text\"\r\n                        placeholder=\"Search All\"\r\n                        className=\"nav-form\"\r\n                      />\r\n                      <InputGroup.Append>\r\n                        <Button variant=\"outline-secondary\" onClick={this.props.handleSearchInput} type=\"button\" className=\"nav-btn-middle\">\r\n                          <FontAwesomeIcon icon={faTimesCircle} />\r\n                        </Button>\r\n                        <Button onClick={this.props.handleSearchSubmit} variant=\"outline-secondary\" className=\"nav-btn\" type=\"submit\">\r\n                          Search\r\n                    </Button>\r\n                      </InputGroup.Append>\r\n                    </InputGroup>\r\n                  </Form>\r\n                </Nav>\r\n                {/* <Nav className=\"col-auto justify-content-space-between\">\r\n                  <Form className=\"nav-filter\">\r\n                    <FormControl\r\n                      onChange={this.props.handleFilterTextInput}\r\n                      value={this.props.filterText}\r\n                      type=\"text\"\r\n                      placeholder=\"Filter...\"\r\n                      className=\"nav-form col-auto\"\r\n                    />\r\n                  </Form>\r\n                </Nav> */}\r\n                {/* <Nav className=\"col-auto justify-content-space-between\">\r\n                  <Form className=\"nav-dropdown\">\r\n                    <InputGroup>\r\n                      <DropdownSelect\r\n                        services={this.props.services}\r\n                        value={this.props.value}\r\n                        handleSelectServiceChange={this.props.handleSelectServiceChange}\r\n                        class=\"dropdown\"\r\n                      />\r\n                      <InputGroup.Append>\r\n                        <Button variant=\"outline-secondary\" onClick={this.props.handleSelectServiceChange} className=\"nav-btn-middle\">\r\n                          <FontAwesomeIcon icon={faTimesCircle} />\r\n                        </Button>\r\n                      </InputGroup.Append>\r\n                    </InputGroup>\r\n                  </Form>\r\n                </Nav> */}\r\n                {/* <Nav className=\"col-auto justify-content-end\"> */}\r\n                <Nav className=\"col ml-4 justify-content-end\">\r\n                  <Nav.Link href=\"/#/logout\">Logout</Nav.Link>\r\n                  {/* </Nav> */}\r\n                  {/* <Nav className=\"col-md-3 ml-auto\">\r\n                        <Nav.Link href=\"/login\">Logout</Nav.Link>\r\n                        <Nav.Link href=\"/register\">Register</Nav.Link>\r\n                  </Nav> */}\r\n                </Nav>\r\n              </Navbar.Collapse>\r\n            </Navbar>\r\n        }\r\n      </AuthContext.Consumer>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nclass SelectRow extends Component {\r\n  render() {\r\n    const service = this.props.service\r\n    const serviceInfo = service.service;\r\n    const id = service.id;\r\n\r\n    return (\r\n      <option>{serviceInfo}</option>\r\n    );\r\n  }\r\n}\r\n\r\nclass DropdownSelect extends Component {\r\n  render() {\r\n\r\n    const rows = [];\r\n\r\n    this.props.services.forEach((service) => {\r\n      rows.push(\r\n        <SelectRow\r\n          service={service}\r\n          id={service.id}\r\n          key={service.id.toString()}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <FormControl as=\"select\"\r\n        value={this.props.value}\r\n        onChange={this.props.handleSelectServiceChange}>\r\n        <option value=\"\" selected disabled hidden>Filter services...</option>\r\n        {rows}\r\n      </FormControl>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { AuthContext } from '../App'\r\n\r\n\r\nconst PrivateRoute = ({ component: ComposedComponent, data, ...rest }) => {\r\n\r\n  class Authentication extends Component {\r\n\r\n    handleRender = props => {\r\n      let isLoggedIn = localStorage.getItem(\"isAuthenticated\")\r\n    if (isLoggedIn === null) {\r\n      isLoggedIn = sessionStorage.getItem(\"isAuthenticated\")\r\n    } \r\n        if (!isLoggedIn) {\r\n          console.log(\"Redirecing from Private Route\")\r\n        return <Redirect to=\"/login\" />\r\n      } else {\r\n        return <ComposedComponent isAuthenticated={this.props.isAuthenticated} {...data} {...props} />\r\n      }\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <Route {...rest} render={this.handleRender} />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Consumer>\r\n      {\r\n        (value) => <Authentication isAuthenticated={value.isAuthenticated} />\r\n      }\r\n    </AuthContext.Consumer>\r\n  )\r\n};\r\n\r\nexport default PrivateRoute","import React, { Component } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { faArrowCircleUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { AuthContext } from '../App'\r\n\r\nexport default class NavbarContainer extends Component {\r\n  render() {\r\n\r\n    const scrollToTop = () => {\r\n        window.scrollTo({top: 0, left: 0, behavior: 'smooth'})\r\n    }\r\n\r\n    return (\r\n      <AuthContext.Consumer>\r\n        { value =>\r\n          !value.isAuthenticated\r\n            ? <div></div>\r\n            : <Button variant=\"outline-light\" onClick={scrollToTop} className=\"nav-to-top-btn\">\r\n            <FontAwesomeIcon icon={faArrowCircleUp} size=\"2x\" />\r\n          </Button>\r\n        }\r\n        </AuthContext.Consumer>\r\n    )\r\n  }\r\n}","import FingerprintJS from '@fingerprintjs/fingerprintjs';\r\nimport Logger from './logger';\r\n\r\nconst logger = new Logger()\r\n\r\nexport default function AuthModule() {\r\n  const fetch = window.fetch\r\n  const authOrigins = [\"http://127.0.0.1:5000\", \"http://localhost:5000\"];\r\n  const serverUrl = authOrigins[1]\r\n  let token = '';\r\n  let fingerprint = '';\r\n  let isLoadingComplete = false;\r\n  let isAuthPending = false;\r\n  let resStream = new ReadableStream()\r\n\r\n  async function loadFingerprint() {\r\n\r\n    const fp = await FingerprintJS.load();\r\n\r\n    const result = await fp.get();\r\n\r\n    fingerprint = result.visitorId;\r\n    logger.console(fingerprint);\r\n    isLoadingComplete = true\r\n\r\n\r\n    return isLoadingComplete\r\n  }\r\n\r\n  function getLoadingStatus() {\r\n    logger.console(\"Fingerprint Loaded \" + isLoadingComplete)\r\n    return isLoadingComplete\r\n  }\r\n\r\n  function checkAuthPending() {\r\n    logger.console(\"Auth Pending \" + isAuthPending)\r\n    return isAuthPending\r\n  }\r\n\r\n\r\n  function setToken(value) {\r\n    token = value\r\n  }\r\n\r\n  function setAuthPending(value) {\r\n    logger.console(\"Setting auth pending \" + value)\r\n    isAuthPending = value\r\n  }\r\n\r\n  function checkToken(token) {\r\n    logger.console(\"token \" + token)\r\n    if (token === undefined || token === '') {\r\n      logger.console(\"Empty Token\")\r\n      return false\r\n    }\r\n    let parsedToken = parseJwt(token)\r\n    if (parsedToken === undefined) {\r\n      logger.console(\"Parsing failed\")\r\n      return false\r\n    }\r\n    // logger.console(parsedToken)\r\n    // logger.console(parsedToken.exp)\r\n    // logger.console(Math.floor(Date.now()/1000))\r\n    if (parsedToken.exp <= Math.floor(Date.now() / 1000)) {\r\n      logger.console(\"Token expired\")\r\n      return false\r\n    }\r\n    logger.console(\"Token Is Valid\")\r\n    return true\r\n  }\r\n\r\n  function delay(ms) {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(resolve, ms);\r\n    });\r\n  }\r\n\r\n  async function authPromise(path) {\r\n    if (isAuthPending) {\r\n      logger.console(\"Auth Pending in Promise\")\r\n      await delay(5000).then(() =>\r\n        logger.console(\"Auth Timout Finished\")\r\n      )\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // if (isAuthPending) {\r\n      //   logger.console(\"Auth Pending in Promise\")\r\n      //   reject(\"Auth failed\")\r\n      // }\r\n      try {\r\n        if (!isAuthPending) {\r\n          logger.console(\"Start Auth Promise\")\r\n          setAuthPending(true)\r\n          isAuthPending = true\r\n          secureAuth(path)\r\n            .then(res => {\r\n              logger.console(res)\r\n              if (res.status === 200) {\r\n                logger.console(\"Auth Promise\")\r\n                resStream = res\r\n                return res.json()\r\n              }\r\n              if (res.status === 205) {\r\n                logger.console(\"ReAuth Prevented\")\r\n                return new Promise((resolve, reject) => {\r\n                  resolve(token)\r\n                })\r\n              }\r\n              if (res.status === 401) {\r\n                logger.console(\"401: Unauthorized\")\r\n                alert(\"401: Unauthorized\")\r\n                localStorage.clear()\r\n                sessionStorage.clear()\r\n                window.location.reload()\r\n                return\r\n              }\r\n              if (!res.ok) {\r\n                throw Error(res.status + \": \" + res.statusText)\r\n              }\r\n            })\r\n            .then(data => {\r\n              //newToken = data.accessToken\r\n              if (data === token) {\r\n                logger.console(\"No Reauth Success\")\r\n                setToken(data)\r\n                setAuthPending(false)\r\n                resolve(true)\r\n                return\r\n              }\r\n              setToken(data.accessToken)\r\n              setAuthPending(false)\r\n              logger.console(\"propmise authSuccess\")\r\n              resolve(true)\r\n              //return new Promise.resolve(\"done\")\r\n              // setIsAuthorized(true) //TODO make zamykanie\r\n            })\r\n            .catch(error => {\r\n              logger.console('Catching error')\r\n              logger.console(error)\r\n              logger.err(error)\r\n              reject(error)\r\n            })\r\n        }\r\n      }\r\n      catch (e) {\r\n        logger.console(e)\r\n      }\r\n      \r\n      //return promise\r\n\r\n    })\r\n  }\r\n\r\n  async function secureFetch(resource, options) {\r\n    //TODO: To bypass auth race make functions with Promisification\r\n    var newToken = \"\"\r\n    //var done = await new Promise.resolve(\"done\")\r\n    logger.console(\"secure fetch\")\r\n    let isAuthorized = checkToken(token)\r\n    if (!isAuthorized) {\r\n      logger.console(\"try Auth Fetch\")\r\n      //const path = serverUrl + '/v2/authAttempt'\r\n      await authPromise(serverUrl + '/v2/authAttempt')\r\n        .then(res => {\r\n          logger.console(\"Reauth success \" + res)\r\n        })\r\n        .catch(error => {\r\n          alert(error)\r\n        })\r\n\r\n    }\r\n    //TODO Place Auth Here or Check Token Validity only\r\n    logger.console(\"building fetch req\")\r\n    let req = new Request(resource, options)\r\n    let destOrigin = new URL(req.url).origin\r\n    // if (newToken !== '') {\r\n    //   token = newToken\r\n    // }\r\n    if (authOrigins.includes(destOrigin)) {\r\n      req.headers.set('Authorization', `Bearer ${token}`)\r\n      req.headers.set('Content-Type', 'application/json')\r\n    } else {\r\n      logger.console(\"Fetch failed. No auth token\")\r\n      return\r\n    }\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      return fetch(req, {\r\n        credentials: 'include'\r\n      })\r\n    }\r\n    logger.console(\"sec fetch ready\")\r\n    return fetch(req)\r\n  }\r\n\r\n  function secureAuth(resource, options) {\r\n    try {\r\n      let isAuthorized = checkToken(token)\r\n    if (!isAuthorized) {\r\n      logger.console(\"secAuth attempt\")\r\n      let req = new Request(resource, options)\r\n      let destOrigin = new URL(req.url).origin\r\n      logger.console(req.url)\r\n      if (fingerprint !== '' && authOrigins.includes(destOrigin)) {\r\n        req.headers.set('Content-Type', 'application/json')\r\n        req.headers.set('Fingerprint', fingerprint)\r\n      }\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        return fetch(req, {\r\n          credentials: 'include'\r\n        })\r\n      }\r\n      logger.console(\"auth request ready\")\r\n      return fetch(req)\r\n    }\r\n    // const obj = {hello: 'world'};\r\n    // const blob = new Blob([JSON.stringify(obj, null, 2)], {type : 'application/json'});\r\n    var init = {\r\n      status: 205\r\n    }\r\n    var response = new Response(null, init)\r\n      return new Promise((resolve, reject) => {\r\n        resolve (response)\r\n      })\r\n  }\r\n  catch (e) {\r\n    logger.console(e)\r\n  }\r\n  }\r\n\r\n  function parseJwt(token) {\r\n    var base64Url = token.split('.')[1];\r\n    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\r\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n    }).join(''));\r\n\r\n    return JSON.parse(jsonPayload);\r\n  };\r\n  return {\r\n    loadFingerprint: loadFingerprint,\r\n    getLoadingStatus: getLoadingStatus,\r\n    checkAuthPending: checkAuthPending,\r\n    checkToken: checkToken,\r\n    authPromise: authPromise,\r\n    setToken: setToken,\r\n    secureFetch: secureFetch,\r\n    secureAuth: secureAuth\r\n  }\r\n}","import React, { useState, useEffect } from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { HashRouter, Switch, Route, useHistory, useLocation, matchPath, useRouteMatch } from \"react-router-dom\";\nimport Cookies from \"universal-cookie\"\n\nimport LoginContainer from \"./components/LoginContainer\";\nimport Logout from \"./components/logout.component\"\nimport Register from \"./components/register.component\";\nimport Board from \"./components/board.component\"\nimport Navbar from \"./components/navbar.component\"\nimport PrivateRoute from \"./components/PrivateRoute\"\nimport ScrollButton from \"./components/scrollToTopButton.component\"\nimport Logger from \"./utils/logger\"\nimport AuthModule from './utils/authModule';\n\nimport DatePicker from \"react-datepicker\";\n//import addDays from 'date-fns/addDays';\nimport \"react-datepicker/dist/react-datepicker.css\";\n//import { render } from '@testing-library/react';\nimport { Integrations } from '@sentry/tracing';\nimport { loggers } from 'winston';\nimport { useGestures } from 'framer-motion';\n\n\n\n\nconst serverUrl = \"http://localhost:5000\"\nconst cookies = new Cookies()\nconst auth = new AuthModule()\nconst logger = new Logger()\nexport const AuthContext = React.createContext();\n\n\n\nexport default function App() {\n\n\n\n  const history = useHistory()\n  const location = useLocation()\n  const match = useRouteMatch(\"/\")\n  const ItemsPerPage = 200\n  const PreloadPageCount = 10\n\n  const [user, setUser] = useState(\"\")\n  const [pass, setPass] = useState(\"\")\n  // const [logs, setLogs] = useState([])\n  // const [errors, setErrors] = useState([])\n  // const [searchResults, setSearchResults] = useState([])\n  const [confirmPass, setConfirmPass] = useState(\"\")\n  const [passwordMatch, setPasswordMatch] = useState(true)\n  const [searchText, setSearchText] = useState(\"\")\n  const [completeSearchRequest, setCompleteSearchRequest] = useState(\"\")\n  const [submitted, setSubmitted] = useState(false)\n  const [canRememberMe, setCanRememberMe] = useState(false)\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  const [isAuthorized, setIsAuthorized] = useState(false)\n  //const [authToken, setAuthToken] = useState(\"\") //TODO keep authToken hashed\n  const [selectedSessionId, setSelectedSessionId] = useState(0)\n  const [selectedSession, setSelectedSession] = useState(\"\")\n  const [sessions, setSessions] = useState([])\n  const [services, setServices] = useState([])\n  const [filenames, setFilenames] = useState([])\n  const [selectedFilename, setSelectedFilename] = useState(\"\")\n  const [selectedService, setSelectedService] = useState(\"\")\n  const [filterText, setFilterText] = useState(\"\")\n  const [filteredLogs, setFilteredLogs] = useState([])\n  const [filteredErrors, setFilteredErrors] = useState([])\n  const [filteredSearch, setFilteredSearch] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentTab, setCurrentTab] = useState(0)\n  const [logsPageCount, setLogsPageCount] = useState(0)\n  const [errorsPageCount, setErrorsPageCount] = useState(0)\n  const [searchPageCount, setSearchPageCount] = useState(0)\n  const [selectedLogId, setSelectedLogId] = useState(0)\n  const [searchedPage, setSearchedPage] = useState(0)\n  const [searchedSessionId, setSearchedSessionId] = useState(0) //TODO check if needed (store in session)\n  const [searchedFilename, setSearchedFilename] = useState(\"\")\n  const [currentLogsPage, setCurrentLogsPage] = useState(1)\n  const [currentErrorsPage, setCurrentErrorsPage] = useState(1)\n  const [currentSearchPage, setCurrentSearchPage] = useState(1)\n  const [isFingerprintReady, setIsFingerprintReady] = useState(false)\n  const [isAuthNeeded, setIsAuthNeeded] = useState(false)\n  const [dateRange, setDateRange] = useState([null, null]);\n  const [startDate, endDate] = dateRange;\n  const [isOpen, setIsOpen] = useState(false);\n  const [needScrollDown, setNeedScrollDown] = useState(true)\n  const [resourses, setResources] = useState([])\n  const [options, setOptions] = useState([])\n  const [offset, setOffset] = useState(0)\n  const [fetchedLogsLength, setFetchedLogsLength] = useState(0)\n  const [fetchedErrorsLength, setFetchedErrorsLength] = useState(0)\n  const [fetchedSearchLength, setFetchedSearchLength] = useState(0)\n  const [currentSlicePage, setCurrentSlicePage] = useState(0)\n  const [isGoingForward, setIsGoingForward] = useState(false)\n  const [isGoingBackwards, setIsGoingBackwards] = useState(false)\n  const [forwardPreloadLogs, setForwardPreloadLogs] = useState([])\n  const [backwardPreloadLogs, setBackwardPreloadLogs] = useState([])\n  const [currentLogSlice, setCurrentLogSlice] = useState([])\n  const [isLoadingSilent, setIsLoadingSilent] = useState(false)\n  const [isFetchSuccessful, setIsFetchSuccessful] = useState(true)\n  const [fetchedLogsSlice, setFetchedLogsSlice] = useState([])\n  const [fetchedErrorsSlice, setFetchedErrorsSlice] = useState([])\n  const [fetchedSearchSlice, setFetchedSearchSlice] = useState([])\n  const [fetchedFirstLogRowId, setFetchedFirstLogRowId] = useState(0)\n  const [isLogsUpdateNeeded, setIsLogsUpdateNeeded] = useState(false)\n  const [isErrorsUpdateNeeded, setIsErrorsUpdateNeeded] = useState(false)\n  const [logsOffset, setLogsOffset] = useState(0)\n  const [errorsOffset, setErrorsOffset] = useState(0)\n\n\n\n  // const onChange = (dates) => {\n  //   const [start, end] = dates;\n  //   setStartDate(start);\n  //   setEndDate(end);\n  // }\n\n  //<DatePicker selected={startDate} onChange={(date) => setStartDate(date)} />\n\n  const ExampleCustomInput = React.forwardRef(({ value, onClick }, ref) => (\n    <button className=\"example-custom-input\" onClick={onClick} ref={ref}>\n      {value}\n    </button>\n  ));\n\n  const setValue = (value) => {\n    if (value !== null) {\n      return (React.forwardRef(({ value, onClick }, ref) => (\n        <button className=\"example-custom-input\" onClick={onClick} ref={ref}>\n          {value}\n        </button>\n      ))\n      )\n    } else {\n      return (React.forwardRef(({ value, onClick }, ref) => (\n        <button className=\"example-custom-input\" onClick={onClick} ref={ref}>\n          {value}\n        </button>\n      ))\n      )\n    }\n  }\n\n  var datePicker = <div> <DatePicker\n    className=\"nav-form col-auto form-control\"\n    onInputClick={() => { setIsOpen(true); setNeedScrollDown(false) }}\n    onClickOutside={() => { setIsOpen(false); setNeedScrollDown(true) }}\n    open={isOpen}\n    selectsRange={true}\n    startDate={startDate}\n    endDate={endDate}\n    onChange={(update) => {\n      setDateRange(update);\n      if (update[1]) {\n        logger.console(\"Date Picker Closed\")\n        setIsOpen(false);\n        setNeedScrollDown(true);\n        setSelectedSession('')\n        setSelectedSessionId(0)\n        setIsLogsUpdateNeeded(true);\n        setIsErrorsUpdateNeeded(true)\n      }\n    }}\n    isClearable={true}\n    placeholderText=\"Select a date\"\n    maxDate={new Date()}\n    dateFormat=\"yyyy-MM-dd\"\n    showYearDropdown\n    dateFormatCalendar=\"MMMM\"\n    yearDropdownItemNumber={15}\n    scrollableYearDropdown\n    //monthsShown={2}\n    todayButton=\"Today\"\n    strictParsing\n  />\n  </div>\n  // <DatePicker\n  //     selected={startDate}\n  //     onChange={onChange}\n  //     startDate={startDate}\n  //     endDate={endDate}\n  //     selectsRange\n  //     inline\n  //   />\n\n\n\n  // TODO Add aToken validity Check\n\n  // logger.log(\"info\", \"TESSTING\")\n\n  // const pathname = UsePathname();\n\n  // const checkLocation = () => {\n\n\n  //   logger.console(pathname)\n\n  //   if (pathname === \"Login\" || pathname === \"Registration\" || pathname === \"Logout\") {\n  //     setIsAuthNeeded(false)\n  //     return\n  //   }\n  //   if (patname === \"Root\") {\n  //     setIsAuthNeeded(true)\n  //   }\n  // }\n\n  // checkLocation()\n\n  const handleUsernameInput = event => {\n    setUser(event.target.value);\n  }\n\n  const handleFilterTextInput = event => {\n    setFilterText(event.target.value);\n    if (event.target.value === \"\") {\n      setLogsPageCount(getTotalLength(fetchedLogsLength))\n      setErrorsPageCount(getTotalLength(fetchedErrorsLength))\n      setSearchPageCount(getTotalLength(fetchedSearchLength))\n    }\n  }\n\n  const handlePassInput = event => {\n    let passV = event.target.value;\n    setPass(passV);\n    if (passV !== confirmPass) {\n      setPasswordMatch(false)\n    }\n    else {\n      setPasswordMatch(true)\n    }\n  }\n  const handleConfirmPassInput = event => {\n    let confirmPassV = event.target.value;\n    setConfirmPass(confirmPassV);\n    if (confirmPassV !== pass) {\n      setPasswordMatch(false)\n    }\n    else {\n      setPasswordMatch(true)\n    }\n  }\n\n  const handleRememberMeCheckbox = event => {\n    let isChecked = event.target.checked;\n    setCanRememberMe(isChecked)\n  }\n\n\n\n  const handleSearchInput = event => {\n\n    if (event.target.nodeName !== 'INPUT') {\n      setSelectedLogId(0)\n      // setSearchResults([])\n      setSearchedSessionId(0)\n      setSearchedFilename(\"\")\n      setSearchText(\"\")\n      setCompleteSearchRequest('')\n      setFetchedSearchSlice([])\n      return\n    }\n\n    setSearchText(event.target.value)\n  }\n\n  function handleErrorSilent(response) {\n    if (!response.ok) {\n      logger.err(response.status + \": \" + response.statusText);\n      return null\n    }\n    return response.json();\n  }\n\n  function handleErrorAlert(response) {\n\n    if (response.ok === undefined) {\n      throw Error(\"Request error\")\n    }\n    if (response.status === 401) {\n      alert(\"401: Unauthorized\")\n      goToHomepage()\n      return\n    }\n    if (!response.ok) {\n      logger.err(response)\n      throw Error(response.statusText);\n    }\n    if (response.status !== 200) {\n      logger.err(response)\n      throw Error(response.statusText);\n    }\n    logger.console(response)\n    return response.json()\n  }\n\n\n  const handleSelectSessionChange = event => {\n    logger.console('selected session ' + event)\n    var id = parseInt(event)\n    // const selectedIndex = event.target.options.selectedIndex;\n    // var id = parseInt(event.target.options[selectedIndex].getAttribute('data-key'))\n    // setselectedSessionId(id);\n    // setSelectedSession(event.target.value)\n\n    //setLogs([])\n    //resetPagination()\n    setSelectedSessionId(id);\n    //setSelectedSession(sessions[id - 1].value)\n    //handleGetLogsBySession(selectedSessionId)\n  }\n\n  const handleSelectFilenameChange = (event) => {\n    logger.console(\"selected logfileId\" + event)\n    let id = parseInt(event)\n    let filename = filenames[id - 1].value\n    console.info(\"Selected Filename\" + filename)\n    setSessions([])\n    setSelectedLogId(0)\n    setSelectedFilename(filename)\n    //resetPagination()\n    //setSelectedSession(\"\")\n    setSelectedSessionId(0)\n    setSelectedSession('')\n    setIsLoadingSilent(false)\n    // setIsErrorsUpdateNeeded(true)\n    // setIsLogsUpdateNeeded(true)\n  }\n\n  const handleSelectServiceChange = event => {\n    if (event.target.nodeName !== 'SELECT') {\n      setSelectedService(\"\")\n      setLogsPageCount(getTotalLength(fetchedLogsLength))\n      setErrorsPageCount(getTotalLength(fetchedErrorsLength))\n      setSearchPageCount(getTotalLength(fetchedSearchLength))\n      logger.console(\"Selected node \" + event.target.nodeName)\n      return\n    }\n    logger.console(\"Selected \" + event.target)\n    setSelectedService(event.target.value)\n  }\n\n\n\n  function handleTabClick(i) {\n    setCurrentTab(i)\n  }\n\n  function resetPagination() {\n    setCurrentLogsPage(1)\n    setCurrentErrorsPage(1)\n    setCurrentSearchPage(1)\n    setSearchedPage(0)\n    setOffset(0)\n    logger.console(\"REsetPagination Complete\")\n  }\n\n  function goToHomepage() {\n    history.replace('/')\n    history.go(0)\n  }\n\n  function reloadPage() {\n    window.location.reload()\n  }\n\n  function goToLoginPage() {\n    localStorage.clear()\n    sessionStorage.clear()\n    history.push('#/login')\n    //history.go(0)\n  }\n\n  function clearAndLogout() {\n    localStorage.clear()\n    sessionStorage.clear()\n    reloadPage()\n  }\n\n  function checkAuth() {\n    return (\n      new Promise((function (resolve, reject) {\n        if (auth.checkToken) {\n          setIsAuthorized(true)\n          resolve(true)\n          return\n        }\n        if (!auth.checkToken) {\n          setIsAuthorized(false)  // if false - setLoading  \n          resolve(false)\n          return\n        }\n      }))\n    )\n  }\n\n  function checkNeedLoading() {\n    if (isAuthenticated && isFetchSuccessful) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n\n  function getTotalLength(len) {\n    let i = 0\n    logger.console('Total Logs count ' + len)\n    i = ((len - (len % ItemsPerPage)) / ItemsPerPage) + 1\n    logger.console('Total Pages Count ' + i)\n\n    return i\n  }\n\n  // function getSearchedPage(len) {\n  //   logger.console(\"Calculating slice: \" + len)\n  //   if (len <= 0) {\n  //     setLoading(false)\n  //     setSubmitted(false)\n  //     return\n  //   }\n  //   let i = ((len - (len % ItemsPerPage)) / ItemsPerPage) + 1\n  //   logger.console(\"Calculated page: \" + i)\n  //   setSearchedPage(i)\n  //   // setCurrentLogsPage(i)\n  //   // setCurrentSearchPage(i)\n  //   setLoading(false)\n  //   setSubmitted(false)\n  // }\n\n\n\n\n\n  function SendRegisterRequest(input) {\n    const path = serverUrl + '/v2/registrationAttempt'\n    auth.secureFetch(path, {\n      method: 'POST',\n      body: JSON.stringify(input)\n    })\n      .then(res => {\n        if (res.status === 200) {\n          logger.info('Registeration Successful')\n          goToHomepage()\n        } else {\n          throw Error(res.statusText)\n        }\n      })\n      .catch(error => {\n        logger.console('Catching error')\n        logger.err(error)\n        goToHomepage()\n        return\n      })\n  }\n\n  function handleLoginSubmit() {\n    setSubmitted(true)\n    const path = serverUrl + '/v2/loginAttempt'\n    const input = { login: user, password: pass, rememberMe: canRememberMe };\n    logger.console(process.env.NODE_ENV)\n    auth.secureAuth(path, {\n      method: 'POST',\n      body: JSON.stringify(input)\n    })\n      .then(res => {\n        return handleErrorAlert(res) //TODO Check why continues to LoginSuccess\n      })\n      .then(data => {\n        logger.info('LoginSuccess')\n        logger.console(data)\n        if (canRememberMe) {\n          localStorage.setItem(\"isAuthenticated\", true)\n        }\n        if (!canRememberMe) {\n          sessionStorage.setItem(\"isAuthenticated\", true)\n        }\n        goToHomepage()\n      })\n      .catch(error => {\n        logger.console('Catching error')\n        logger.err(error)\n        goToHomepage()\n      })\n  }\n\n  function handleLogoutSubmit() {\n    //setSubmitted(true)\n    const path = serverUrl + '/v2/logoutAttempt'\n    auth.secureFetch(path)\n      .then(res => {\n        if (res.status === 200) {\n          logger.info('LogoutSuccess')\n          clearAndLogout()\n          // localStorage.clear()\n          // sessionStorage.clear()\n\n          // reloadPage()\n          //goToHomepage()\n        } else {\n          throw Error(res.statusText)\n        }\n      })\n      .catch(error => {\n        logger.console('Catching error')\n        logger.err(error)\n        goToHomepage()\n      })\n  }\n\n  // function handleAuthSubmit() {\n  //   setSubmitted(true)\n  //   logger.console(\"auth attempt func\")\n  //   const path = serverUrl + '/v2/authAttempt'\n  //   auth.secureAuth(path)\n  //     .then(res => {\n  //       logger.console(res)\n  //       if (res.status == 200) {\n  //         return res.json()\n  //       }\n  //       if (res.status === 401) {\n  //         alert(res.statusText)\n  //         goToLoginPage()\n  //       }\n  //     })\n  //     .then(data => {\n  //       logger.console('AuthSuccess')\n  //       logger.console(data)\n  //       auth.setToken(data.accessToken)\n  //       setSubmitted(false)\n  //       setIsAuthorized(true)\n  //     })\n  //     .catch(error => {\n  //       logger.console('Catching error')\n  //       logger.console(error)\n  //       logger.err(error)\n  //       goToHomepage()\n  //     })\n  // }\n\n\n\n  // function handleUnblockSubmit() {\n  //   //setSubmitted(true)\n  //   const path = serverUrl + '/v2/private/unblock/'\n  //   const unblockInput = { login: \"test5\" };\n  //   auth.secureFetch(path, {\n  //     method: 'POST', \n  //     body: JSON.stringify(unblockInput)\n  //   })\n  //   .then(res => {\n  //     if (res.status == 200) {\n  //       return res.json()\n  //     } else {\n  //       throw Error(res.statusText)\n  //     }\n  //   })\n  //   .then(data => {\n  //       logger.console('UnblockSuccess')\n  //       alert(\"User is successfuly unblocked\")\n  //     })\n  //     .catch(error => {\n  //       logger.console('Catching error')\n  //       logger.err(error)\n  //       goToHomepage()\n  //     })\n  // }\n\n  // function handleUNSECUREDGetLogsSubmit() {\n  //   setSubmitted(true)\n  //   const path = serverUrl + '/v2/getLogs'\n  //   //   const config = {\n  //   //     headers: { Authorization: `Bearer ${authToken}` }\n  //   // };\n  //   //const input = {login: user, password: pass, fingerprint:fingerprint};\n  //   fetch(path)\n  //     .then(res => {\n  //       if (res.status == 200) {\n  //         return res.json()\n  //       } else {\n  //         throw Error(res.statusText)\n  //       }\n  //     })\n  //     .then(data => {\n  //       //cookies.set(\"rToken\", res.data.refreshToken, {path: '/'})\n  //       setLogs(data.logs)\n  //       //setSubmitted(false)\n  //     })\n  //         .catch(error => {\n  //           logger.console('Catching error')\n  //           logger.err(error)\n  //           goToHomepage()\n  //         })\n  //     }\n\n  // function handleGetLogsSubmit() {\n  //   setSubmitted(true)\n  //   const path = serverUrl + '/v2/private/getLogs'\n  //   auth.secureFetch(path)\n  //     .then(res => {\n  //       return handleErrorAlert(res)\n  //     })\n  //     .then(data => {\n  //       logger.console('GetLogsSuccess')\n  //       setLogs(data.logs)\n  //       setSubmitted(false)\n  //     })\n  //     .catch(error => {\n  //       logger.console('Catching error')\n  //       logger.err(error)\n  //     })\n  // }\n\n\n\n  function handleGetLogsSessions() {\n    return (\n      new Promise((function (resolve, reject) {\n\n        logger.console(selectedFilename)\n        if (selectedFilename === \"\") {\n          return\n        }\n\n        //const logFilename = localStorage.getItem(\"lastSelectedFilename\")\n        const path = serverUrl + '/v2/private/getLogsSessions'\n        var logsInputs = { value: selectedFilename }\n        auth.secureFetch(path, {\n          method: 'POST',\n          body: JSON.stringify(logsInputs)\n        })\n          .then(res => {\n            return handleErrorSilent(res)\n          })\n          .then(data => {\n            if (data === null) {\n              return\n            }\n            logger.console('GetLogSessionsSuccess')\n            const sessions = data.sessions\n            //var sessionId = sessions[sessions.length - 1].id\n            // if (selectedSessionId === 0) {\n            //   setSelectedSessionId(sessionId)\n            // }\n            setSessions(sessions)\n            resolve(1)\n          })\n          .catch(error => {\n            logger.console('Catching error')\n            logger.console(error)\n            logger.err(error)\n            reject(error)\n            goToHomepage()\n          })\n\n      })\n      )\n    )\n  }\n\n  function handleGetLogsFilenames() {\n    logger.console(\"Getting log filenames\")\n    const path = serverUrl + '/v2/private/getLogsFilenames'\n    auth.secureFetch(path)\n      .then(res => {\n        return handleErrorAlert(res)\n      })\n      .then(data => {\n        logger.console(data)\n        logger.console(data.results)\n        setFilenames(data.results)\n      })\n      .catch(error => {\n        logger.console('Catching error')\n        logger.console(error)\n        logger.err(error)\n        goToHomepage()\n      })\n  }\n\n\n  // function handleGetLogsFilenames() {\n  //   setSubmitted(true)\n  //   const path = serverUrl + '/v2/private/getLogsFilenames'\n  //   const config = {\n  //     headers: { Authorization: `Bearer ${authToken}` }\n  //   };\n  //   axios.get(path, config)\n  //     .then(res => {\n  //       logger.console('GetLogsFilenamesSuccess')\n  //       logger.console(res.data)\n  //       setFilenames(res.data.results)\n  //       setSubmitted(false)\n  //     })\n  //     .catch(error => {\n  //       logger.console('Catching error')\n  //       if (error.response !== undefined && error.response.status === 401) {\n  //         logger.err(error)\n  //         setAuthToken(\"\")\n  //         history.replace('/')\n  //         history.go(0)\n  //         return\n  //       }\n  //       logger.err(error)\n  //       goToHomepage()\n  //     })\n  // }\n\n  function handleGetLogServiceInfo() {\n    if (selectedFilename === \"\") {\n      return\n    }\n    const path = serverUrl + '/v2/private/getLogsServiceInfo'\n    var logsInputs = { value: selectedFilename }\n    auth.secureFetch(path, {\n      method: 'POST',\n      body: JSON.stringify(logsInputs)\n    })\n      .then(res => {\n        return handleErrorAlert(res)\n      })\n      .then(data => {\n        if (data === null) {\n          return\n        }\n        logger.console('GetLogServiceInfoSuccess')\n        setServices(data.services)\n      })\n      .catch(error => {\n        logger.console('Catching error')\n        logger.err(error)\n        goToHomepage()\n      })\n  }\n\n  function handleGetLogsByDate() {\n\n    return (\n      new Promise((resolve, reject) => {\n        logger.console(selectedFilename)\n        if (selectedFilename === \"\") {\n          logger.console(\"No filename selected\")\n          return\n        }\n        setLoading(true)\n        // if (logs[0] !== undefined) {\n        //   currentSessionId = logs[0].sessionId\n        // }\n\n        const path = serverUrl + '/v2/private/getLogsByDate'\n        var sessionInputs = { startDate: startDate, endDate: endDate, filename: selectedFilename }\n        auth.secureFetch(path, {\n          method: 'POST',\n          body: JSON.stringify(sessionInputs)\n        })\n          .then(res => {\n            return handleErrorAlert(res)\n          })\n          .then(data => {\n            logger.console('GetLogsByDateSuccess')\n            var errors = data.errors\n            var logs = data.logs\n            setLogsPageCount(getTotalLength(logs.length))\n            setErrorsPageCount(getTotalLength(errors.length))\n            //setLogs(logs)\n            //setErrors(errors)\n            //setLoading(false)\n            resolve(1)\n          })\n          .catch(error => {\n            logger.console('Catching error')\n            logger.err(error)\n            history.replace('/') // make it for unautorized/ //TODO\n            history.go(0)\n            reject(error)\n          })\n      })\n    )\n  }\n\n  function handleGetLogsSliceByDate() {\n\n    return (\n      new Promise((resolve, reject) => {\n        logger.console(selectedFilename)\n        if (selectedFilename === \"\") {\n          logger.console(\"No filename selected\")\n          return\n        }\n        if (!isFetchSuccessful) {\n          setLoading(checkNeedLoading())\n          logger.console(\"Preventing Request Dupe\")\n          return\n        }\n        setIsFetchSuccessful(false)\n        setLoading(!isLoadingSilent)\n\n        const path = serverUrl + '/v2/private/getLogsByDateWithLimit'\n        var sessionInputs = { startDate: startDate, endDate: endDate, filename: selectedFilename, limit: PreloadPageCount * ItemsPerPage, offset: offset * ItemsPerPage }\n        auth.secureFetch(path, {\n          method: 'POST',\n          body: JSON.stringify(sessionInputs)\n        })\n          .then(res => {\n            return handleErrorAlert(res)\n          })\n          .then(data => {\n            logger.console('GetLogsByDateSuccess')\n            setLogsPageCount(getTotalLength(data.logsCount))\n            //setErrorsPageCount(getTotalLength(data.errorsCount))\n            setFetchedLogsLength(data.logsCount)\n            //setFetchedErrorsLength(data.errorsCount)\n            //setLogs(data.currentLogs)\n            //setCurrentLogSlice(data.currentLogs)\n            setFetchedLogsSlice(data.currentLogs)\n            setBackwardPreloadLogs(data.backLogs)\n            setForwardPreloadLogs(data.forwardLogs)\n            //setFetchedErrorsSlice(data.errorsSlice) //TODO GetErrors slice\n            setIsFetchSuccessful(true)\n            //setLoading(false)\n            if (currentLogsPage === 1) {\n              setFetchedFirstLogRowId(data.currentLogs[0].id)\n            }\n            resolve(1)\n          })\n          .catch(error => {\n            logger.console('Catching error')\n            logger.err(error)\n            history.replace('/') // make it for unautorized/ //TODO\n            history.go(0)\n            reject(error)\n          })\n      })\n    )\n  }\n\n  function handleGetLogsSliceBySession() {\n    // TODO Prevent request duplicate\n    return (\n      new Promise((resolve, reject) => {\n        logger.console(selectedFilename)\n        if (selectedFilename === \"\") {\n          logger.console(\"No filename selected\")\n          return\n        }\n        if (!isFetchSuccessful) {\n          setLoading(checkNeedLoading())\n          logger.console(\"Preventing Request Dupe\")\n          return\n        }\n        setIsFetchSuccessful(false)\n        setLoading(!isLoadingSilent)\n        var currentSessionId = -1\n        if (fetchedLogsSlice[0] !== undefined) {\n          currentSessionId = fetchedLogsSlice[0].sessionId\n        }\n\n        const path = serverUrl + '/v2/private/getLogsBySessionWithLimit'\n        var sessionInputs = { sessionId: selectedSessionId, filename: selectedFilename, limit: PreloadPageCount * ItemsPerPage, offset: offset * ItemsPerPage }\n        auth.secureFetch(path, {\n          method: 'POST',\n          body: JSON.stringify(sessionInputs)\n        })\n          .then(res => {\n            return handleErrorAlert(res)\n          })\n          .then(data => {\n            logger.console('GetLogsBySessionSuccess')\n            // var errors = data.errors\n            // var logs = data.logs\n            var sessionId = data.currentLogs[0].sessionId\n            logger.console(data)\n            setLogsPageCount(getTotalLength(data.logsCount))\n            //setErrorsPageCount(getTotalLength(data.errorsCount))\n            setFetchedLogsLength(data.logsCount)\n            // setFetchedErrorsLength(data.errorsCount)\n            // setLogs(data.currentLogs)\n            //setCurrentLogSlice(data.currentLogs)\n            setFetchedLogsSlice(data.currentLogs)\n            if (currentTab === 0) {\n              setBackwardPreloadLogs(data.backLogs)\n              setForwardPreloadLogs(data.forwardLogs)\n            }\n            if (sessionId !== selectedSessionId) {\n              setSelectedSessionId(sessionId)\n            }\n            //setFetchedErrorsSlice(data.errorsSlice) //TODO GetErrors slice\n            setIsFetchSuccessful(true)\n            //setLoading(false)\n            if (currentLogsPage === 1) {\n              setFetchedFirstLogRowId(data.currentLogs[0].id)\n            }\n            resolve(1)\n          })\n          .catch(error => {\n            logger.console('Catching error')\n            logger.err(error)\n            reject(error)\n            history.replace('/') // make it for unautorized/ //TODO\n            history.go(0)\n          })\n      })\n    )\n  }\n\n  function handleGetErrorsSliceBySession() {\n    // TODO Prevent request duplicate\n    return (\n      new Promise((resolve, reject) => {\n        logger.console(selectedFilename)\n        if (selectedFilename === \"\") {\n          logger.console(\"No filename selected\")\n          return\n        }\n        if (!isFetchSuccessful) {\n          setLoading(checkNeedLoading())\n          logger.console(\"Preventing Request Dupe\")\n          return\n        }\n        setIsFetchSuccessful(false)\n        setLoading(!isLoadingSilent)\n        var currentSessionId = -1\n        if (fetchedLogsSlice[0] !== undefined) {\n          currentSessionId = fetchedLogsSlice[0].sessionId\n        }\n\n        const path = serverUrl + '/v2/private/getErrorsBySessionWithLimit'\n        var sessionInputs = { sessionId: selectedSessionId, filename: selectedFilename, limit: PreloadPageCount * ItemsPerPage, offset: offset * ItemsPerPage }\n        auth.secureFetch(path, {\n          method: 'POST',\n          body: JSON.stringify(sessionInputs)\n        })\n          .then(res => {\n            return handleErrorAlert(res)\n          })\n          .then(data => {\n            logger.console('GetErrorsBySessionSuccess')\n            // var errors = data.errors\n            // var logs = data.logs\n            logger.console(data)\n            setErrorsPageCount(getTotalLength(data.errorsCount))\n            setFetchedErrorsLength(data.errorsCount)\n            setFetchedErrorsSlice(data.currentErrors) //TODO GetErrors slice\n            if (currentTab === 1) {\n              setBackwardPreloadLogs(data.backErrors)\n              setForwardPreloadLogs(data.forwardErrors)\n            }\n            setIsFetchSuccessful(true)\n            //setLoading(false)\n            resolve(1)\n          })\n          .catch(error => {\n            logger.console('Catching error')\n            logger.err(error)\n            reject(error)\n            history.replace('/') // make it for unautorized/ //TODO\n            history.go(0)\n          })\n      })\n    )\n  }\n\n  function handleGetErrorsSliceByDate() {\n\n    return (\n      new Promise((resolve, reject) => {\n        logger.console(selectedFilename)\n        if (selectedFilename === \"\") {\n          logger.console(\"No filename selected\")\n          return\n        }\n        if (!isFetchSuccessful) {\n          setLoading(checkNeedLoading())\n          logger.console(\"Preventing Request Dupe\")\n          return\n        }\n        setIsFetchSuccessful(false)\n        setLoading(!isLoadingSilent)\n\n        const path = serverUrl + '/v2/private/getErrorsByDateWithLimit'\n        var sessionInputs = { startDate: startDate, endDate: endDate, filename: selectedFilename, limit: PreloadPageCount * ItemsPerPage, offset: offset * ItemsPerPage }\n        auth.secureFetch(path, {\n          method: 'POST',\n          body: JSON.stringify(sessionInputs)\n        })\n          .then(res => {\n            return handleErrorAlert(res)\n          })\n          .then(data => {\n            logger.console('GetErrorsByDateSuccess')\n            logger.console(data)\n            setErrorsPageCount(getTotalLength(data.errorsCount))\n            setFetchedErrorsLength(data.errorsCount)\n            setFetchedErrorsSlice(data.currentErrors) //TODO GetErrors slice\n            //setFetchedLogsSlice(data.currentErrors)\n            setBackwardPreloadLogs(data.backErrors)\n            setForwardPreloadLogs(data.forwardErrors)\n            setIsFetchSuccessful(true)\n            //setLoading(false)\n            resolve(1)\n          })\n          .catch(error => {\n            logger.console('Catching error')\n            logger.err(error)\n            history.replace('/') // make it for unautorized/ //TODO\n            history.go(0)\n            reject(error)\n          })\n      })\n    )\n  }\n\n\n\n\n  function handleGetLogsBySession() {\n    // let sessionId = localStorage.getItem(\"lastSelectedSession\")\n    // sessionId = parseInt(sessionId)\n    // const logFilename = localStorage.getItem(\"lastSelectedFilename\")\n    // if (logFilename === null) {\n    //   return\n    // }\n\n    return (\n      new Promise((resolve, reject) => {\n        logger.console(selectedFilename)\n        if (selectedFilename === \"\") {\n          logger.console(\"No filename selected\")\n          return\n        }\n        setLoading(true)\n        var currentSessionId = -1\n        if (fetchedLogsSlice[0] !== undefined) {\n          currentSessionId = fetchedLogsSlice[0].sessionId\n        }\n\n        // if (searchedSessionId === currentSessionId && searchedFilename === selectedFilename) { //Check if needed\n        //   logger.console(\"Searching in the SAME session\")\n        //   logger.console(currentSessionId)\n        //   setSubmitted(false)\n        //   setLoading(false)\n        //   return\n        // }\n        // if (searchedSessionId !== 0) {\n        //   logger.console(\"Searching in ANOTHER same session\")\n        //   sessionId = searchedSessionId\n        // }\n        //setSearchedPage(0)\n        const path = serverUrl + '/v2/private/getLogsBySession'\n        var sessionInputs = { sessionId: selectedSessionId, filename: selectedFilename }\n        auth.secureFetch(path, {\n          method: 'POST',\n          body: JSON.stringify(sessionInputs)\n        })\n          .then(res => {\n            return handleErrorAlert(res)\n          })\n          .then(data => {\n            logger.console('GetLogsBySessionSuccess')\n            var errors = data.errors\n            var logs = data.logs\n            setLogsPageCount(getTotalLength(data.logsCount))\n            setErrorsPageCount(getTotalLength(data.errorsCount))\n            //setLogs(logs)\n            //setErrors(errors)\n            setLoading(false)\n            resolve(1)\n          })\n          .catch(error => {\n            logger.console('Catching error')\n            logger.err(error)\n            reject(error)\n            history.replace('/') // make it for unautorized/ //TODO\n            history.go(0)\n          })\n      })\n    )\n  }\n\n  const handleLinkClick = (event) => {\n    event.preventDefault()\n    setSubmitted(true)\n    setLoading(true)\n    var logId = event.target.dataset.logId\n    logger.console(event.target)\n    logger.console(logId)\n    logId = parseInt(logId)\n    const path = serverUrl + '/v2/private/getLogById'\n    var linkInputs = { id: logId, value: selectedFilename }\n    auth.secureFetch(path, {\n      method: 'POST',\n      body: JSON.stringify(linkInputs)\n    })\n      .then(res => {\n        return handleErrorAlert(res)\n      })\n      .then(data => {\n        const logId = data.log.id\n        const sessionId = data.log.sessionId\n        logger.console('GetLogSuccess')\n        //setSelectedSession(sessions[sessionId - 1].dates)\n        // setIsLogsUpdateNeeded(true)\n        // setIsErrorsUpdateNeeded(true)\n        setSearchedSessionId(sessionId)\n        setSelectedSessionId(sessionId)\n        //setSearchedFilename(selectedFilename)\n        //setSearchResults([])\n        setDateRange([null, null])\n        setCompleteSearchRequest('')\n        setFetchedSearchSlice([])\n        setSelectedLogId(logId)\n        setCurrentTab(0)\n        //setDateRange([null, null])\n  \n        // setSubmitted(false)\n        // setLoading(false)\n        //setFilterText(res.data.log.date)\n        //handleGetLogsBySession() // Check if session id is set up\n      })\n      .catch(error => {\n        logger.console('Catching error')\n        // if (error.response === undefined) {\n        //   alert(error)\n        //   goToHomepage()\n        //   return\n        // }\n        logger.err(error)\n        goToHomepage()\n      })\n  }\n\n  const handleSearchSubmitWithLimit = (event) => {\n    setSubmitted(true)\n    setLoading(true)\n    event.preventDefault()\n    const path = serverUrl + '/v2/private/findLogsWithLimit'\n    const searchInput = { text: searchText, filename: selectedFilename, limit: PreloadPageCount * ItemsPerPage, offset: offset * ItemsPerPage }\n    auth.secureFetch(path, {\n      method: 'POST',\n      body: JSON.stringify(searchInput)\n    })\n      .then(res => {\n        return handleErrorAlert(res)\n      })\n      .then(data => {\n        logger.console('SearchSuccess')\n        setLogsPageCount(getTotalLength(data.logsCount))\n        setFetchedSearchLength(data.logsCount)\n        //setCurrentLogSlice(data.currentLogs)\n        setFetchedSearchSlice(data.currentLogs)\n        setBackwardPreloadLogs(data.backLogs)\n        setForwardPreloadLogs(data.forwardLogs)\n        setCompleteSearchRequest(searchText)\n        setSubmitted(false)\n        setLoading(false)\n      })\n      .catch(error => {\n        logger.console('Catching error')\n        logger.console(error.response)\n        if (error.response !== undefined && error.response.status === 401) {\n          cookies.remove(\"rToken\", { path: '/' })\n        }\n        logger.err(error)\n        goToHomepage()\n      })\n  }\n\n  const handleSearchSubmit = (event) => {\n    setSubmitted(true)\n    setLoading(true)\n    event.preventDefault()\n    const path = serverUrl + '/v2/private/findLogs'\n    const searchInput = { text: searchText, filename: selectedFilename };\n    auth.secureFetch(path, {\n      method: 'POST',\n      body: JSON.stringify(searchInput)\n    })\n      .then(res => {\n        return handleErrorAlert(res)\n      })\n      .then(data => {\n        logger.console('SearchSuccess')\n        var logs = data.logs\n        var lenLogs = logs.length\n        setSearchPageCount(getTotalLength(lenLogs))\n        //setSearchResults(logs)\n        setSubmitted(false)\n        setLoading(false)\n      })\n      .catch(error => {\n        logger.console('Catching error')\n        logger.console(error.response)\n        if (error.response !== undefined && error.response.status === 401) {\n          cookies.remove(\"rToken\", { path: '/' })\n        }\n        logger.err(error)\n        goToHomepage()\n      })\n  }\n\n  const handleRegisterSubmit = event => {\n    const password = pass;\n    const confirmPassword = confirmPass;\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      setPasswordMatch(false)\n    }\n    else {\n      setPasswordMatch(true)\n      const input = { login: user, password: pass }//, fingerprint: fingerprint }\n      SendRegisterRequest(input)\n    }\n  }\n\n  const countOffsetJump = (page) => {\n    let i = 0\n    i = (page / 10) | 0\n    logger.console(\"OFFSET: \" + i)\n    logger.console(\"ROUND OFFSET: \" + i * PreloadPageCount)\n    return i * PreloadPageCount\n  }\n\n  const isNumOutOfSequence = (num, start, end) => {\n    if (num < start || num > end) {\n      return true\n    }\n    return false\n  }\n\n  const isNumBetweenSequence = (num, start, end) => {\n    if (num >= start && num <= end) {\n      return true\n    }\n    return false\n  }\n\n  const handleLogsPageChange = (page) => {\n    logger.console(\"PAGE CHANGED? OFFSET \" + offset)\n    let dif = page - offset\n    logger.console(\"COUNT currentLogsPage - offset = \" + dif)\n    logger.console(\"REQUEST Pending \" + !isFetchSuccessful)\n    if (!isFetchSuccessful && isNumOutOfSequence(dif, 1, PreloadPageCount)) {\n      logger.console(\"PAGE NOT CHanged\")\n      setLoading(true)\n      return\n    }\n    logger.console(\"Setting State Logs Page\")\n    //setIsLogsUpdateNeeded(true)\n    setCurrentLogsPage(page)\n    setCurrentSlicePage(getCurrentSliceIndex(page))\n    handleOffset(page)\n  }\n\n  // if (page > 5 + offset && page < 10 + offset) {\n  //   setOffset(offset + 5)\n  // }\n\n  // if (page < offset && offset - page < 5) {\n  //   setOffset(offset - 5)\n  // }\n\n  // if (page < offset && offset - page > 5 && page < 5) {\n  //   setOffset(page - 5)\n  // }\n\n  // if (page > 10 + offset) {\n  //   setOffset(page - 5)\n  // }\n\n  //}\n\n  const handleSetOffsetSilent = (dif) => {\n\n    logger.console(\"Setting Offset \")\n    logger.console(\"dif=\" + dif)\n    if (dif > 0) {\n      logger.console(\"Offset Forward\")\n      setOffset(dif)\n      return\n    }\n    if (dif <= -10) {\n      logger.console(\"Offset Backward\")\n      setOffset(-dif)\n    }\n    if (dif > -10 || dif === 0) {\n      logger.console(\"Offset 0\")\n      setOffset(0)\n    }\n\n  }\n\n  const countSliceOffset = (page) => {\n    let n = page % 10\n    if (n === 0) {\n      n = 10\n    }\n    return n\n  }\n\n  const getCurrentSliceIndex = (page) => {\n    return countSliceOffset(page) - 1\n  }\n\n  const handleErrorsPageChange = (page) => {\n    logger.console(\"ERR PAGE CHANGED? OFFSET \" + offset)\n    let dif = page - offset\n    logger.console(\"COUNT currentLogsPage - offset = \" + dif)\n    logger.console(\"REQUEST Pending \" + !isFetchSuccessful)\n    if (!isFetchSuccessful && isNumOutOfSequence(dif, 1, PreloadPageCount)) {\n      logger.console(\"PAGE NOT CHanged\")\n      setLoading(true)\n      return\n    }\n    logger.console(\"Setting State Errors Page\")\n    //setIsErrorsUpdateNeeded(true)\n    setCurrentErrorsPage(page)\n    setCurrentSlicePage(getCurrentSliceIndex(page))\n    handleOffset(page)\n  }\n  //   logger.console(\"Setting State Errors Page\")\n  //   setCurrentErrorsPage(page)\n  //   setCurrentSlicePage(getCurrentSliceIndex(page))\n  //   handleOffset(page)\n  // }\n\n  const handleSearchPageChange = (page) => {\n    logger.console(\"Setting State Search Page\")\n    setCurrentSearchPage(page)\n    setCurrentSlicePage(getCurrentSliceIndex(page))\n    handleOffset(page)\n  }\n\n  const getLogsSessions = () => {\n    if (isAuthorized && selectedFilename !== \"\") {\n      logger.console('GettingLogsSessions')\n      localStorage.setItem(\"lastSelectedFilename\", selectedFilename)\n      sessionStorage.removeItem(\"lastSelectedSessionId\")\n      //resetPagination()\n      handleGetLogsSessions()\n    }\n  }\n\n  function toggleUpdate() {\n    logger.console(\"Offset changed!\")\n    if (currentTab === 0 && offset !== logsOffset) {\n      logger.console(\"SETTING LOGS UPDATE NEEDED\")\n      setLogsOffset(offset)\n      setIsLogsUpdateNeeded(true)\n    }\n    if (currentTab === 1 && offset !== errorsOffset) {\n      logger.console(\"SETTING ERRORS UPDATE NEEDED\")\n      setErrorsOffset(offset)\n      setIsErrorsUpdateNeeded(true)\n    }\n  }\n\n  // useEffect(() => {\n  //   let pathname = window.location.hash\n  //   const checkValues = [\"#/login\", \"#/register\", \"#/logout\"] \n  //   logger.console(pathname)\n\n  //   if (checkValues.includes(pathname)) {\n  //     logger.console(\"Auth NOT needed!\")\n  //     setIsAuthNeeded(false)\n  //   } else {\n  //     logger.console(\"Auth needed!\")\n  //     setIsAuthNeeded(true)\n  //   }\n  // })\n\n  useEffect(() => {\n    let isLoggedIn = sessionStorage.getItem(\"isAuthenticated\")\n    if (isLoggedIn === null) {\n      isLoggedIn = localStorage.getItem(\"isAuthenticated\")\n      setCanRememberMe(isLoggedIn !== null)\n    }\n\n    if (isLoggedIn) {\n      logger.console(\"Setting isAuth\")\n      setIsAuthenticated(true)\n      return\n    }\n    logger.console(\"Login page from Effect App\")\n    goToLoginPage()\n  }, [])\n\n\n  // useEffect(() => {\n  //   // let isLoggedIn = localStorage.getItem(\"isAuthenticated\")\n  //   logger.console(\"Try Auth Hook\")\n  //   if (isAuthenticated && isFingerprintReady) {\n  //     logger.console('AuthAttempt hook')\n  //     handleAuthSubmit()\n  //   }\n  //   // else {\n  //   //   logger.console(\"Login page from App\")\n  //   // //history.push(\"/login\")\n  //   // goToLoginPage()\n  //   // }\n  //   // if () {\n  //   //   history.replace('/')\n  //   //   history.go(0)\n  //   // }\n  // }, [isAuthenticated, isFingerprintReady]); // used for setting hook only on Mount event; [authToken] listens to variable change\n\n\n\n  useEffect(() => {\n    if (startDate === null && endDate === null && selectedFilename !== '') {\n      resetPagination()\n      setIsErrorsUpdateNeeded(true)\n      setIsLogsUpdateNeeded(true)\n    }\n  }, [startDate, endDate])\n\n  function handleOffset(currentPage) {\n    var dif = currentPage - offset\n    logger.console(\"PAge changed \" + currentPage)\n    logger.console(\"dif \" + (dif))\n    //logger.console(dif + PreloadPageCount <= -PreloadPageCount)\n    if (dif > 0 && dif > PreloadPageCount && dif - PreloadPageCount < PreloadPageCount) { // Set await for logs update (new state?)\n      logger.console(\"Forward silent\")\n      setCurrentLogSlice(forwardPreloadLogs)\n      setIsGoingForward(true)\n      setIsGoingBackwards(false)\n      setIsLoadingSilent(true)\n      handleSetOffsetSilent(PreloadPageCount + offset)\n      return\n    }\n\n    if (dif <= 0 && dif >= -PreloadPageCount && dif + PreloadPageCount <= PreloadPageCount) {\n      logger.console(\"Backward silent\")\n      setCurrentLogSlice(backwardPreloadLogs)\n      setIsGoingForward(false)\n      setIsGoingBackwards(true)\n      setIsLoadingSilent(true)\n      handleSetOffsetSilent(PreloadPageCount - offset)\n      return\n    }\n\n    if (dif > 0 && dif > PreloadPageCount && dif - PreloadPageCount >= PreloadPageCount) {\n      logger.console(\"Forward LOUD\")\n      setIsGoingForward(false)\n      setIsGoingBackwards(false)\n      setIsLoadingSilent(false)\n      handleSetOffsetSilent(countOffsetJump(currentPage))\n      return\n    }\n\n    if (dif < 0 && dif < -PreloadPageCount && dif + PreloadPageCount <= 0) {\n      logger.console(\"Backward LOUD\")\n      setIsGoingForward(false)\n      setIsGoingBackwards(false)\n      setIsLoadingSilent(false)\n      handleSetOffsetSilent(countOffsetJump(currentPage))//- offset)\n      return\n    }\n  }\n\n  useEffect(() => {\n    if (currentTab === 1 && fetchedErrorsSlice[0] !== undefined) {\n      logger.console(\"Showing Errors\")\n      setCurrentLogSlice(fetchedErrorsSlice)\n      setCurrentSlicePage(getCurrentSliceIndex(currentErrorsPage))\n      setOffset(errorsOffset)\n    }\n  }, [currentTab, fetchedErrorsSlice])\n\n  useEffect(() => {\n    if (completeSearchRequest !== '' && fetchedSearchSlice[0] !== undefined) {\n      setCurrentLogSlice(fetchedSearchSlice)\n      setCurrentSlicePage(getCurrentSliceIndex(currentSearchPage))\n      setOffset(countOffsetJump(currentSearchPage))\n    }\n  }, [currentTab, completeSearchRequest, fetchedSearchSlice])\n\n  useEffect(() => {\n    if (currentTab === 0 && fetchedLogsSlice[0] !== undefined && completeSearchRequest === '' ) {\n      logger.console(\"Setting Logs Offset\")\n      setCurrentLogSlice(fetchedLogsSlice)\n      setCurrentSlicePage(getCurrentSliceIndex(currentLogsPage))\n      setOffset(logsOffset)\n    }\n  }, [currentTab, fetchedLogsSlice])\n\n  useEffect(() => {\n    if (searchedPage > 0) { //&& currentTab === 0 && completeSearchRequest === '') {\n      setCurrentLogSlice(fetchedLogsSlice)\n      setCurrentLogsPage(searchedPage)\n      setCurrentSlicePage(getCurrentSliceIndex(searchedPage))\n      handleOffset(searchedPage)\n      setSearchedPage(0)\n      logger.console(\"Set searched Page: \" + searchedPage)\n    }\n  }, [searchedPage])\n\n  // useEffect(() => {\n  //   if (searchedPage !== 0) {\n  //     setCurrentLogsPage(searchedPage)\n  //     handleOffset(searchedPage)\n  //     logger.console(\"Set searched Page: \" + searchedPage)\n  //   }\n  // }, [searchedPage])\n\n  useEffect(() => {\n    logger.console(\"offset changed?\")\n    if (offset >= 0 && isAuthorized && selectedFilename !== '') {\n      toggleUpdate()\n    }\n  }, [offset, isAuthorized, selectedFilename])\n\n  useEffect(() => {\n    if (searchText === '') {\n      setCompleteSearchRequest('')\n    }\n  }, [searchText])\n\n  // useEffect(() => {\n  //   if (offset >= 0 && filenames[0] !== undefined) {\n  //     setLoading(!isFetchSuccessful)\n  //   }\n  // }, [offset])\n\n  useEffect(() => {\n    let filename = localStorage.getItem(\"lastSelectedFilename\")\n    let sessionId = sessionStorage.getItem(\"lastSelectedSessionId\")\n    sessionId = parseInt(sessionId)\n\n    logger.console(\"Selected SessionID is:\")\n    logger.console(sessionId)\n    logger.console(filename)\n\n    if (filename === null) {\n      filename = \"\"\n    }\n    if (isNaN(sessionId)) {\n      sessionId = 0\n    }\n\n    setSelectedFilename(filename)\n    setSelectedSessionId(sessionId)\n  }, [])\n\n  // useEffect(() => {\n  //   if(selectedSessionId === 0 && sessions[0] !== undefined) {\n  //     setSelectedSessionId(sessions[sessions.length - 1].id)\n  //   }\n  // },[])\n\n  const usePathname = () => {\n    const location = useLocation();\n    return location.pathname;\n  }\n\n\n  //let pathname = usePathname()\n\n  useEffect(() => {\n    logger.console(\"loadFingerPrint\")\n    let promise = auth.loadFingerprint()\n\n    promise.then(\n      res => setIsFingerprintReady(res)\n    )\n  }, [])\n\n  useEffect(() => {\n    logger.console(\"check token hook\")\n    setIsAuthorized(auth.checkToken())\n  }, [])\n\n\n\n\n  useEffect(() => {\n    if (isAuthorized) {\n      logger.console(\"Getting Logs Filenames\")\n      handleGetLogsFilenames()\n    }\n  }, [isAuthorized])\n\n  // useEffect(() => {\n  //   async function fetchLogs() {\n  //     if (isAuthorized && selectedFilename !== '' && startDate === null && endDate === null) { // && logs[0] === undefined && selectedSessionId !== 0\n  //       logger.console('GettingLogsBySession')\n  //       await handleGetLogsBySession()\n  //         .then(res => {\n  //           logger.console(res + \" GOT LOGS\")\n  //           getLogsSessions()\n  //         })\n  //     }\n  //   }\n  //   fetchLogs()\n  // }, [selectedFilename, isAuthorized, startDate, endDate])\n\n  // useEffect(() => {\n  //   async function fetchLogs() {\n  //     if (isAuthorized && startDate !== null && endDate !== null) { // && logs[0] === undefined && selectedSessionId !== 0\n  //       logger.console('GettingLogsByDate')\n  //       //setSelectedSession(\"\")\n  //       if (isErrorsUpdateNeeded) {\n  //         // await handleGetLogsSliceByDate()\n  //         //   .then(res => {\n  //         //     logger.console(res + \" GOT LOGS\")\n  //         //     setIsLogsUpdateNeeded(false)\n  //         //   })\n  //         await handleGetErrorsSliceByDate()\n  //           .then(res => {\n  //             logger.console(res + \" GOT Errors\")\n  //             setIsErrorsUpdateNeeded(false)\n  //           })\n  //       } else {\n  //         logger.console(\"NO ErrorsUpdate NEEDED\")\n  //       }\n  //       if (isLogsUpdateNeeded) {\n  //         // await handleGetErrorsSliceByDate()\n  //         //   .then(res => {\n  //         //     logger.console(res + \" GOT Errors\")\n  //         //     setIsErrorsUpdateNeeded(false)\n  //         //   })\n  //         await handleGetLogsSliceByDate()\n  //           .then(res => {\n  //             logger.console(res + \" GOT LOGS\")\n  //             setIsLogsUpdateNeeded(false)\n  //             getLogsSessions()\n  //           })\n  //       } else {\n  //         logger.console(\"NO LogsUpdate NEEDED\")\n  //       }\n  //     }\n  //   }\n  //   fetchLogs()\n  // }, [isAuthorized, startDate, endDate])\n\n  useEffect(() => {\n    async function fetchLogs() {\n      if (isAuthorized && startDate !== null && endDate !== null && isErrorsUpdateNeeded) { // && logs[0] === undefined && selectedSessionId !== 0\n        logger.console('GettingLogsByDate')\n          await handleGetErrorsSliceByDate()\n            .then(res => {\n              logger.console(res + \" GOT Errors\")\n              setIsErrorsUpdateNeeded(false)\n            })       \n      }\n    }\n    fetchLogs()\n  }, [isAuthorized, startDate, endDate, isErrorsUpdateNeeded])\n\n  useEffect(() => {\n    async function fetchLogs() {\n      if (isAuthorized && startDate !== null && endDate !== null && isLogsUpdateNeeded) { // && logs[0] === undefined && selectedSessionId !== 0\n        logger.console('GettingLogsByDate')\n          await handleGetLogsSliceByDate()\n            .then(res => {\n              logger.console(res + \" GOT LOGS\")\n              setIsLogsUpdateNeeded(false)\n              getLogsSessions()\n            })\n      }\n    }\n    fetchLogs()\n  }, [isAuthorized, startDate, endDate, isLogsUpdateNeeded])\n\n  useEffect(() => {\n    async function fetchLogs() {\n      if (isAuthorized && startDate === null && endDate === null && isErrorsUpdateNeeded) { // && logs[0] === undefined && selectedSessionId !== 0\n        logger.console('GettingErrorsSLICEBySession')\n          // await handleGetLogsSliceBySession()\n          //   .then(res => {\n          //     logger.console(res + \" GOT LOGS\")\n          //     setIsLogsUpdateNeeded(false)\n          //   })\n          await handleGetErrorsSliceBySession()\n            .then(res => {\n              logger.console(res + \" GOT Errors\")\n              setIsErrorsUpdateNeeded(false)\n            })\n\n      //TODO Make Errors Request\n    }\n  }\n    logger.console(\"Try fetch Errors\")\n    fetchLogs()\n  }, [isAuthorized, startDate, endDate, isErrorsUpdateNeeded])\n\n\n  useEffect(() => {\n    async function fetchLogs() {\n      if (isAuthorized && startDate === null && endDate === null && isLogsUpdateNeeded) { // && logs[0] === undefined && selectedSessionId !== 0\n        logger.console('GettingLogsSLICEBySession')\n                  // await handleGetErrorsSliceBySession()\n          //   .then(res => {\n          //     logger.console(res + \" GOT Errors\")\n          //     setIsErrorsUpdateNeeded(false)\n          //   })\n          await handleGetLogsSliceBySession()\n            .then(res => {\n              logger.console(res + \" GOT LOGS\")\n              setIsLogsUpdateNeeded(false)\n              getLogsSessions()\n            })\n      }\n    }\n    logger.console(\"Try fetch Logs\")\n    fetchLogs()\n  }, [isAuthorized, startDate, endDate, isLogsUpdateNeeded])\n\n  \n  // useEffect(() => {\n  //   async function fetchLogs() {\n  //     if (isAuthorized && offset >= 0 && startDate === null && endDate === null) { // && logs[0] === undefined && selectedSessionId !== 0\n  //       logger.console('GettingLogsSLICEBySession')\n  //       if (isErrorsUpdateNeeded) {\n  //         // await handleGetLogsSliceBySession()\n  //         //   .then(res => {\n  //         //     logger.console(res + \" GOT LOGS\")\n  //         //     setIsLogsUpdateNeeded(false)\n  //         //   })\n  //         await handleGetErrorsSliceBySession()\n  //           .then(res => {\n  //             logger.console(res + \" GOT Errors\")\n  //             setIsErrorsUpdateNeeded(false)\n  //           })\n  //       } else {\n  //         logger.console(\"NO ErrorsUpdate NEEDED\")\n  //       }\n  //       if (isLogsUpdateNeeded) {\n  //         // await handleGetErrorsSliceBySession()\n  //         //   .then(res => {\n  //         //     logger.console(res + \" GOT Errors\")\n  //         //     setIsErrorsUpdateNeeded(false)\n  //         //   })\n  //         await handleGetLogsSliceBySession()\n  //           .then(res => {\n  //             logger.console(res + \" GOT LOGS\")\n  //             setIsLogsUpdateNeeded(false)\n  //             getLogsSessions()\n  //           })\n  //       } else {\n  //         logger.console(\"NO LogsUpdate NEEDED\")\n  //       }\n  //     }\n\n  //     //TODO Make Errors Request\n  //   }\n  //   fetchLogs()\n  // }, [selectedFilename, offset, isAuthorized, startDate, endDate])\n\n  // useEffect(() => {\n  //   if (currentTab === 0)\n  // })\n\n  // useEffect(() => {\n  //   async function fetchLogs() {\n  //     if (isAuthorized && selectedFilename !== '' && offset >= 0 && startDate !== null && endDate !== null) { // && logs[0] === undefined && selectedSessionId !== 0\n  //       logger.console('GettingLogsSliceByDate')\n  //       setSelectedSession(\"\")\n  //       await handleGetLogsSliceByDate()\n  //         .then(res => {\n  //           logger.console(res + \" GOT LOGS\")\n  //           getLogsSessions()\n  //         })\n  //     }\n  //   }\n  //   fetchLogs()\n  // }, [selectedFilename, offset, isAuthorized, startDate, endDate])\n\n  // useEffect(() => {\n  //   if (isAuthorized && selectedLogId !== 0) {\n  //     logger.console('GettingLogsBySearchRequest')\n  //     handleGetLogsBySession()\n  //   }\n  // }, [selectedLogId, isAuthorized])\n\n  useEffect(() => {\n    async function authorize() {\n      if (isAuthenticated && !isAuthorized && isFingerprintReady) {\n        logger.console(\"AuthPromiseHook\")\n        //var prom = auth.authPromise(serverUrl + '/v2/authAttempt')\n        //await prom.then(res => {\n        await auth.authPromise(serverUrl + '/v2/authAttempt')\n          .then(res => {\n            setIsAuthorized(true)\n          })\n          .catch(error => {\n            alert(error)\n            goToLoginPage()\n          })\n      }\n      return\n    }\n    authorize()\n  }, [isAuthorized, isAuthenticated, isFingerprintReady])\n\nuseEffect(() => {\n  if (selectedSessionId >= 0 && selectedFilename !== '' && selectedLogId === 0) {\n    logger.console(\"Setting IS Logs UPDATE needed\")\n    setIsLogsUpdateNeeded(true)\n    setIsErrorsUpdateNeeded(true)\n    resetPagination()\n  }\n}, [selectedFilename, selectedSessionId])\n\nuseEffect(() => {\n  if (isFetchSuccessful && !isLogsUpdateNeeded && !isErrorsUpdateNeeded) {\n    setLoading(false)\n  }\n}, [isFetchSuccessful, isLogsUpdateNeeded, isErrorsUpdateNeeded])\n\n\n  useEffect(() => {\n    if (isAuthorized && selectedSession !== \"\" && sessions[0] !== undefined) { // && selectedSessionId !== 0\n      logger.console('GettingLogsServices')\n      // localStorage.setItem(\"lastSelectedFilename\", selectedFilename)\n      // sessionStorage.removeItem(\"lastSelectedSessionId\")\n      // resetPagination()\n      handleGetLogServiceInfo()\n    }\n  }, [selectedSession, isAuthorized, sessions])\n\n  useEffect(() => {\n    var sessionId = sessionStorage.getItem(\"lastSelectedSessionId\")\n    logger.console(\"Reading SessionId fromSession \" + sessionId)\n    sessionId = parseInt(sessionId)\n    if (isNaN(sessionId)) {\n      return\n    }\n    setSelectedSessionId(sessionId)\n\n    if (sessions[0] !== undefined && selectedSessionId > 0) {\n      logger.console(\"Setting Session Name\")\n      setSelectedSession(sessions[selectedSessionId - 1].value)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (sessions[0] !== undefined && selectedSessionId > 0) {\n      logger.console(\"Setting Session Name \" + selectedSessionId)\n      setSelectedSession(sessions[selectedSessionId - 1].value)\n    }\n  }, [sessions, selectedSessionId])\n\n  useEffect(() => {\n    if (searchedSessionId !== 0) {\n      sessionStorage.setItem(\"lastSelectedSessionId\", searchedSessionId)\n    }\n  }, [searchedSessionId])\n\n  useEffect(() => {\n    if (selectedSessionId !== 0) {\n      sessionStorage.setItem(\"lastSelectedSessionId\", selectedSessionId)\n    }\n  }, [selectedSessionId])\n\n\n\n  // useEffect(() => {\n  //   logger.console(\"Try getting search page\")\n  //   if (logs[0] !== undefined && selectedLogId !== 0) { //|| selectedLogId !== 0 && searchedSessionIdId === logs[0].sessionId) {\n  //     if (logs[0].sessionId !== searchedSessionId) {\n  //       return\n  //     }\n  //     logger.console(\"Getting Search Page\")\n  //     var slice = logs.slice(0, selectedLogId - logs[0].id)\n  //     var lenSlice = slice.length\n  //     getSearchedPage(lenSlice)\n  //   }\n  // }, [selectedLogId, logs])\n\n  useEffect(() => {\n    if (selectedSessionId > 0 && selectedLogId >= fetchedFirstLogRowId) { //|| selectedLogId !== 0 && searchedSessionIdId === logs[0].sessionId) {\n      logger.console(\"Try getting search page\")\n      if (selectedSessionId !== searchedSessionId) {\n        setSelectedLogId(0)\n        return\n      }\n      logger.console(\"Getting Search Page\")\n      getSearchedPage()\n      // setIsLogsUpdateNeeded(true)\n      // setIsErrorsUpdateNeeded(true)\n    }\n  }, [selectedLogId, fetchedFirstLogRowId, selectedSessionId])\n\n  function getSearchedPage() {\n    logger.console(\"Calculating slice\")\n    // if (len <= 0) {\n    //   setLoading(false)\n    //   setSubmitted(false)\n    //   return\n    // }\n    logger.console(\"LOG ID\" + fetchedLogsSlice[0].id)\n    let i = countSearchedPage(selectedLogId)\n    logger.console(\"Calculated page: \" + i)\n    setSearchedPage(i)\n    // setCurrentLogsPage(i)\n    // setCurrentSearchPage(i)\n    setLoading(false)\n    setSubmitted(false)\n  }\n\n  const countSearchedPage = (logId) => {\n    let searchedPage = Math.trunc((logId - fetchedFirstLogRowId) / ItemsPerPage)\n    logger.console(\"TRUNCATE: \" + searchedPage)\n    searchedPage = searchedPage + 1\n    return searchedPage\n  }\n\n\n\n  // useEffect(() => {\n\n  //   if (filterText !== \"\" || selectedService !== \"\") {\n  //     var logRows = []\n  //     logs.forEach((log) => {\n  //       const logDate = log.dateUtc\n  //       const logDesc = log.description.toLowerCase()\n  //       if (logDate !== filterText && logDesc.indexOf(filterText) === -1 || log.service.indexOf(selectedService) === -1) {\n  //         return;\n  //       }\n  //       logRows.push(log)\n  //     });\n  //     var errorRows = []\n  //     errors.forEach((error) => {\n  //       const errorDate = error.dateUtc\n  //       const errorDesc = error.description.toLowerCase()\n  //       if (errorDate !== filterText && errorDesc.indexOf(filterText) === -1 || error.service.indexOf(selectedService) === -1) {\n  //         return;\n  //       }\n  //       errorRows.push(error)\n  //     });\n  //     var searchRows = []\n  //     searchResults.forEach((searchResult) => {\n  //       const searchDate = searchResult.dateUtc\n  //       const searchDesc = searchResult.description.toLowerCase()\n  //       if (searchDate !== filterText && searchDesc.indexOf(filterText) === -1 || searchResult.service.indexOf(selectedService) === -1) {\n  //         return;\n  //       }\n  //       searchRows.push(searchResult)\n  //     });\n  //     var lenLogs = logRows.length\n  //     var lenErrs = errorRows.length\n  //     var lenSearch = searchRows.length\n  //     setLogsPageCount(getTotalLength(fetchedLogsLength))\n  //     setErrorsPageCount(getTotalLength(fetchedErrorsLength))\n  //     setSearchPageCount(getTotalLength(fetchedSearchLength))\n  //     setFilteredLogs(logRows)\n  //     setFilteredErrors(errorRows)\n  //     setFilteredSearch(searchRows)\n  //     //setCurrentPage(1)\n  //     logger.console(\"filter complete\")\n\n  //   }\n  // }, [filterText, selectedService, logs, errors, searchResults])\n\n  // useEffect(() => {\n  //   if (authToken !== \"\" && logs[0] !== undefined) {\n  //     if (selectedSessionId !== undefined){\n  //       logger.console('CalculatingLogsLength')\n  //       setLogsPageCount(getTotalLength())\n  //     }\n  //   }\n  // }, [selectedSessionId])\n\n  return (<HashRouter history={history}>\n    <div className=\"App\">\n      <AuthContext.Provider value={{ isAuthenticated: isAuthenticated }}>\n        <Navbar searchText={searchText} handleSearchInput={handleSearchInput}\n          handleSearchSubmit={handleSearchSubmitWithLimit}// handleUnblockSubmit={handleUnblockSubmit}\n          handleFilterTextInput={handleFilterTextInput} filterText={filterText}\n          handleSelectServiceChange={handleSelectServiceChange} services={services}\n          value={selectedService} />\n        <ScrollButton />\n        <Switch>\n          <PrivateRoute exact path='/'\n            data={\n              {\n                //errors: errors, searchResults: searchResults, \n                logs: currentLogSlice, submitted: submitted, logsDropdownValue: selectedFilename,\n                filteredLogs: filteredLogs, filteredErrors: filteredErrors, filteredSearch: filteredSearch, filenames: filenames,\n                sessions: sessions, sessionsDropdownValue: selectedSession, filterText: filterText, filterService: selectedService,\n                loading: loading, logsPageCount: logsPageCount, errorsPageCount: errorsPageCount, searchPageCount: searchPageCount,\n                currentTab: currentTab, itemsPerPage: ItemsPerPage, logId: selectedLogId, searchedPage: searchedPage, currentSlicePage: currentSlicePage,\n                currentLogsPage: currentLogsPage, currentErrorsPage: currentErrorsPage, currentSearchPage: currentSearchPage,\n                datePicker: datePicker, needScrollDown: needScrollDown, dateRange: dateRange, completeSearchRequest: completeSearchRequest,\n                handleLogsPageChange: handleLogsPageChange, handleErrorsPageChange: handleErrorsPageChange, handleSearchPageChange: handleSearchPageChange,\n                handleSelectSessionChange: handleSelectSessionChange, handleSelectFilenameChange: handleSelectFilenameChange,\n                handleTabClick: handleTabClick, handleLinkClick: handleLinkClick\n              }\n            }\n            component={Board} />\n          <Route exact path=\"/login\"\n            render={() =>\n              <LoginContainer user={user} pass={pass} handleUsernameInput={handleUsernameInput}\n                handlePassInput={handlePassInput} handleLoginSubmit={handleLoginSubmit}\n                handleRememberMeCheckbox={handleRememberMeCheckbox}\n                canRememberMe={canRememberMe} submitted={submitted} />\n            } />\n          <Route exact path=\"/logout\"\n            render={() =>\n              <Logout handleLogoutSubmit={handleLogoutSubmit}\n                submitted={submitted} isAuthenticated={isAuthenticated} />\n            } />\n          <Route exact path=\"/registration\"\n            render={() =>\n              <Register user={user} pass={pass}\n                confirmPass={confirmPass} passwordMatch={passwordMatch}\n                handleUsernameInput={handleUsernameInput} handlePassInput={handlePassInput}\n                handleConfirmPassInput={handleConfirmPassInput} handleRegisterSubmit={handleRegisterSubmit} />\n            } />\n          {/* <Route exact path='/board'\n            render={() => <BoardContainer handleSearchInput={handleSearchInput} handleSearchSubmit={handleAuthSubmit}\n            searchText={searchText} \n            />} /> */}\n        </Switch>\n      </AuthContext.Provider>\n    </div>\n  </HashRouter>\n  );\n}\n\n\n\nconst getParams = (pathname) => {\n  const matchProfile = matchPath(pathname, {\n    path: `/login`,\n  });\n  logger.console(matchProfile)\n  logger.console(matchProfile.params)\n  return (matchProfile && matchProfile.params) || {};\n};\n\n\n\n// // if (process.env.NODE_ENV !== 'production') {\n// //   logger.add(new transports.Console({\n// //     format: format.combine(\n// //       format.colorize(),\n// //       format.simple()\n// //     )\n// //   }));\n// // }\n\n\n\n\nfunction UsePathname() {\n\n  const [pathname, setPathname] = useState(\"\")\n\n  let location = useLocation()\n  logger.console(location.pathname)\n  // let pathname = \"\"\n\n  useEffect(() => {\n    if (location.pathname === \"/login\") {\n      setPathname(\"Login\")\n    }\n    if (location.pathname === \"/logout\") {\n      setPathname(\"Logout\")\n    }\n    if (location.pathname === \"/registration\") {\n      setPathname(\"Registration\")\n    }\n    if (location.pathname === \"/\") {\n      setPathname(\"Root\")\n    }\n  }, [])\n  return pathname\n}\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn: \"https://e77bac2571ba4f6294474757a57dd2b4@o662135.ingest.sentry.io/5765143\",\n  release: \"my-project-name@\" + process.env.npm_package_version,\n  integrations: [new Integrations.BrowserTracing()],\n\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n});\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}